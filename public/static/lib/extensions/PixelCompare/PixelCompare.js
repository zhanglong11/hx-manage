/*!
 * LMV v7.9.0
 * 
 * Copyright 2019 Bimfish, Inc.
 * All rights reserved.
 * 
 * This computer source code and related instructions and comments are the
 * unpublished confidential and proprietary information of Bimfish, Inc.
 * and are protected under Federal copyright and state trade secret law.
 * They may not be disclosed to, copied or used by any third party without
 * the prior written consent of Bimfish, Inc.
 * 
 * Bimfish Forge Viewer Usage Limitations:
 * 
 * The Bimfish Forge viewer can only be used to view files generated by
 * Bimfish Forge services. The Bimfish Forge Viewer JavaScript must be
 * delivered from an Bimfish hosted URL.
 */
Bimfish.Extensions.PixelCompare=function(e){var n={};function t(i){if(n[i])return n[i].exports;var o=n[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=n,t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:i})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(t.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(i,o,function(n){return e[n]}.bind(null,o));return i},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s="./extensions/PixelCompare/PixelCompare.js")}({"./extensions/PixelCompare/PixelCompare.js":
/*!*************************************************!*\
  !*** ./extensions/PixelCompare/PixelCompare.js ***!
  \*************************************************/
/*! exports provided: default */function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return m}));var i=t(/*! ../../src/wgs/render/ShaderPass */"./src/wgs/render/ShaderPass.js"),o=t(/*! ./shaders/DiffShader */"./extensions/PixelCompare/shaders/DiffShader.js"),r=t(/*! ./PixelCompareConstants */"./extensions/PixelCompare/PixelCompareConstants.js"),a=t(/*! ./PixelCompareTool */"./extensions/PixelCompare/PixelCompareTool.js"),s=t(/*! ./PixelCompareUI */"./extensions/PixelCompare/PixelCompareUI.js");function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function c(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function f(e,n){return!n||"object"!==l(n)&&"function"!=typeof n?h(e):n}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(e,n){return(p=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var m=function(e){function n(e){var t,l=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return d(this,n),(t=f(this,u(n).call(this,e,l))).viewer=e,t.options=l,t.mainModel=null,t.secondaryModel=null,t.secondaryRenderContext=null,t.virtualCamera,t.mainModelVisibilityBackup=!1,t.secondaryModelVisibilityBackup=!1,t.splitPosition=r.DEFAULTS.SPLIT_LINE_POSITION,t.splitLineWidth=r.DEFAULTS.SPLIT_LINE_WIDTH,t.splitLineColor=new THREE.Color(r.DEFAULTS.SPLIT_LINE_COLOR),t.duration=r.DEFAULTS.ANIMATION_DURATION,t.transitionVal=0,t.changeOffsetMode=!1,t.diffMode=l.diffMode,t.defaultDiffMode=r.DEFAULTS.DEFAULT_DIFF_MODE,t.colorIntensity=1,t.modelHiddenMap={},t.tool=new a.default(h(t)),t.viewer.config.headlessViewer||(t.compareUI=new s.default(h(t))),t.diffPass=new i.ShaderPass(o.DiffShader),t.renderer=t.viewer.impl.renderer(),t.pixelRatio=t.viewer.impl.glrenderer().getPixelRatio(),t.frustum=new Bimfish.Viewing.Private.FrustumIntersector,t.renderSecondaryModelBinded=t.renderSecondaryModel.bind(h(t)),t.initDiffBinded=t.initDiff.bind(h(t)),t.onResizeBinded=t.onResize.bind(h(t)),t}var t,l,m;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&p(e,n)}(n,Bimfish.Viewing.Extension),t=n,(l=[{key:"getModel",value:function(e){return"number"==typeof e?this.viewer.impl.findModel(e,!0):e}},{key:"compareTwoModels",value:function(e,n){var t=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(this.getModel(e)!==this.mainModel||this.getModel(n)!==this.secondaryModel){var r=this.isActive()?this.deactivate():Promise.resolve();r.then((function(){t.mainModel=t.getModel(e),t.secondaryModel=t.getModel(n),t.mainModelInfo=i,t.secondaryModelInfo=o,t.activate()}))}}},{key:"activate",value:function(){return this.mainModel&&this.secondaryModel?this.isActive()?void 0:(this.initDiff(),this.viewer.toolController.registerTool(this.tool),this.viewer.toolController.activateTool(this.tool.getName()),!0):(console.warn("Pixel Compare requires two models. Use compareTwoModels and supply the models."),!1)}},{key:"deactivate",value:function(){var e=this;return new Promise((function(n){e.exitPreviousDiffMode((function(){e.activeStatus=!1,e.diffMode=null,e.virtualCamera=null,e.mainModelVisibilityBackup||e.viewer.hideModel(e.mainModel),e.secondaryModelVisibilityBackup&&e.viewer.showModel(e.secondaryModel),e.viewer.toolController.deregisterTool(e.tool),e.viewer.removeEventListener(Bimfish.Viewing.RENDER_PRESENTED_EVENT,e.renderSecondaryModelBinded),e.viewer.removeEventListener(Bimfish.Viewing.VIEWER_RESIZE_EVENT,e.onResizeBinded),e.clearColorTopBackup&&e.clearColorBottomBackup&&e.viewer.setBackgroundColor(e.clearColorTopBackup.x,e.clearColorTopBackup.y,e.clearColorTopBackup.z,e.clearColorBottomBackup.x,e.clearColorBottomBackup.y,e.clearColorBottomBackup.z),e.viewer.impl.toggleSwapBlackAndWhite(e.swapBlackAndWhiteBackup),e.cleanRenderContext(),e.viewer.impl.invalidate(!0),e.compareUI&&e.compareUI.destroyUI(),e.mainModel=null,e.secondaryModel=null,e.mainModelInfo=null,e.secondaryModelInfo=null,e.modelHiddenMap={},e.viewer.dispatchEvent({type:r.EVENTS.DIFF_TOOL_DEACTIVATED}),n()}))}))}},{key:"isModelVisible",value:function(e){return!!this.viewer.impl.findModel(e.id)}},{key:"initDiff",value:function(){this.viewer.impl.modelQueue().getModels().concat(this.viewer.impl.modelQueue().getHiddenModels()).some((function(e){return!e.isLoadDone()}))?this.viewer.addEventListener(Bimfish.Viewing.GEOMETRY_LOADED_EVENT,this.initDiffBinded,{once:!0}):(this.activeStatus=!0,this.mainModelVisibilityBackup=this.isModelVisible(this.mainModel),this.secondaryModelVisibilityBackup=this.isModelVisible(this.secondaryModel),this.mainModelVisibilityBackup||this.viewer.showModel(this.mainModel),this.secondaryModelVisibilityBackup&&this.viewer.hideModel(this.secondaryModel),this.clearColorTopBackup=this.viewer.impl.clearColorTop.clone().multiplyScalar(255),this.clearColorBottomBackup=this.viewer.impl.clearColorBottom.clone().multiplyScalar(255),(this.mainModel.getMetadata("page_dimensions","hide_paper")||this.secondaryModel.getMetadata("page_dimensions","hide_paper"))&&this.viewer.setBackgroundColor(255,255,255,255,255,255),this.initVirtualCamera(),this.setDiffMode(this.diffMode||this.defaultDiffMode),this.swapBlackAndWhiteBackup=this.viewer.impl.swapBlackAndWhite,this.viewer.impl.toggleSwapBlackAndWhite(!1),this.compareUI&&this.compareUI.createUI(),this.viewer.addEventListener(Bimfish.Viewing.RENDER_PRESENTED_EVENT,this.renderSecondaryModelBinded),this.viewer.addEventListener(Bimfish.Viewing.VIEWER_RESIZE_EVENT,this.onResizeBinded))}},{key:"renderDiff",value:function(){var e={x:1/(this.viewer.canvas.clientWidth*this.pixelRatio),y:1/(this.viewer.canvas.clientHeight*this.pixelRatio)};this.diffPass.uniforms.texture1.value=this.renderer.getColorTarget(),this.diffPass.uniforms.diffMode.value=r.DIFF_MODES_SHADER[this.diffMode],this.diffPass.uniforms.splitPosition.value=this.splitPosition,this.diffPass.uniforms.splitLineWidth.value=this.splitLineWidth/this.viewer.getCamera().clientWidth,this.diffPass.uniforms.splitLineColor.value=this.splitLineColor,this.diffPass.uniforms.t.value=this.transitionVal,this.diffPass.uniforms.resolution.value=e,this.diffPass.uniforms.colorIntensity.value=this.colorIntensity,this.diffPass.uniforms.mainModelHidden.value=this.modelHiddenMap[0],this.diffPass.uniforms.secondaryModelHidden.value=this.modelHiddenMap[1],this.modelHiddenMap[1]?this.diffPass.uniforms.visibleModelBounds.value=this.getModelNormalizedProjectedBounds(this.mainModel,this.viewer.getCamera()):this.modelHiddenMap[0]&&(this.diffPass.uniforms.visibleModelBounds.value=this.getModelNormalizedProjectedBounds(this.secondaryModel,this.virtualCamera)),this.renderer.presentBuffer(this.diffPass)}},{key:"hideAllModels",value:function(){var e=this;this.viewer.getVisibleModels().forEach((function(n){e.viewer.hideModel(n.id)}))}},{key:"cleanRenderContext",value:function(){this.secondaryRenderContext&&this.secondaryRenderContext.cleanup(),this.secondaryRenderContext=null}},{key:"getModelTrimmedBounds",value:function(e){var n=e.getVisibleBounds(),t=e.getMetadata("page_dimensions","hide_paper");if(e.is2d()&&!e.getData().isLeaflet&&!e.getData().isPdf&&!t){n=n.clone();var i=e.getMetadata("page_dimensions","page_width");n.max.x-=.0075*i,n.min.y+=.0075*i}return n}},{key:"getModelNormalizedProjectedBounds",value:function(e,n){var t=this.getModelTrimmedBounds(e),i=this.worldToClient(t.min,n),o=this.worldToClient(t.max,n);return new THREE.Vector4(i.x,i.y,o.x,o.y)}},{key:"worldToClient",value:function(e,n){var t=e.clone().project(n);return new THREE.Vector3((t.x+1)/2,(t.y+1)/2,0)}},{key:"onResize",value:function(){if(this.virtualCamera){var e=this.viewer.getCamera();this.virtualCamera.aspect=e.aspect,this.virtualCamera.clientWidth=e.clientWidth,this.virtualCamera.clientHeight=e.clientHeight,this.virtualCamera.updateCameraMatrices()}this.cleanRenderContext()}},{key:"initVirtualCamera",value:function(){var e=this.getModelTrimmedBounds(this.mainModel),n=this.getModelTrimmedBounds(this.secondaryModel),t=Bimfish.Viewing.ScreenShot.getCameraWithFitBounds(this.viewer,e);this.virtualCamera=Bimfish.Viewing.ScreenShot.getCameraWithFitBounds(this.viewer,n),this.virtualCamera.scaleZ=this.virtualCamera.position.z/t.position.z;var i=new THREE.Vector3(n.size().x/2,n.size().y/2,0);this.mainModel.getData().isLeaflet&&this.secondaryModel.getData().isLeaflet?i.y=-i.y:this.mainModel.getData().isLeaflet&&!this.secondaryModel.getData().isLeaflet&&(i.y-=1-e.size().y),this.virtualCamera.position.sub(i),this.virtualCamera.target.sub(i),this.virtualCamera.lastX=this.virtualCamera.position.x,this.virtualCamera.lastY=this.virtualCamera.position.y}},{key:"updateVirtualCamera",value:function(){var e=this.viewer.getCamera(),n=Math.abs(this.virtualCamera.lastZoom-e.position.z)<.001;this.changeOffsetMode&&n&&(this.virtualCamera.lastX=e.position.x,this.virtualCamera.lastY=e.position.y);var t=(e.position.x-this.virtualCamera.lastX)*this.virtualCamera.scaleZ,i=(e.position.y-this.virtualCamera.lastY)*this.virtualCamera.scaleZ,o=new THREE.Vector3(this.virtualCamera.position.x+t,this.virtualCamera.position.y+i,e.position.z*this.virtualCamera.scaleZ),r=new THREE.Vector3(this.virtualCamera.target.x+t,this.virtualCamera.target.y+i,this.virtualCamera.target.z);this.virtualCamera.position.copy(o),this.virtualCamera.target.copy(r),this.virtualCamera.up.copy(this.viewer.getCamera().up),this.virtualCamera.updateCameraMatrices();var a=this.secondaryModel.getVisibleBounds();this.viewer.impl.updateNearFarValues(this.virtualCamera,a),this.virtualCamera.lastX=e.position.x,this.virtualCamera.lastY=e.position.y,this.virtualCamera.lastZoom=e.position.z}},{key:"renderSecondaryModel",value:function(){var e=this,n=this.viewer.impl.getCanvasBoundingClientRect(),t=n.width*this.pixelRatio,i=n.height*this.pixelRatio;this.updateVirtualCamera();var o={returnAsTarget:!0,models:[this.secondaryModel],renderContext:this.secondaryRenderContext,camera:this.virtualCamera,dontWaitForLeafletTiles:!0};this.secondaryModel.getData().isLeaflet&&(this.frustum.reset(this.virtualCamera),this.secondaryModel.getIterator().reset(this.frustum,this.virtualCamera)||this.viewer.impl.invalidate(!0)),Bimfish.Viewing.ScreenShot.getScreenShot(t,i,(function(n,t){e.diffPass.uniforms.texture2.value=t,e.secondaryRenderContext=n,e.renderDiff()}),o,this.viewer.impl)}},{key:"setSplitPosition",value:function(e){this.splitPosition=e,this.renderDiff()}},{key:"getSplitPosition",value:function(){return this.splitPosition}},{key:"setDiffMode",value:function(e){var n=this;this.isActive()?this.diffMode===e&&0!==this.transitionVal||this.exitPreviousDiffMode((function(){n.enterNewDiffMode(e)})):console.warn("Pixel Compare is not active.")}},{key:"exitPreviousDiffMode",value:function(e,n){var t=this;n||null===this.diffMode||void 0===this.diffMode?(this.transitionVal=0,e()):Bimfish.Viewing.Private.fadeValue(this.transitionVal,0,this.duration,(function(e){t.transitionVal=e,t.renderDiff()}),e)}},{key:"enterNewDiffMode",value:function(e,n){var t=this;this.diffMode=e,this.viewer.dispatchEvent({type:r.EVENTS.DIFF_TOOL_DIFF_MODE_CHANGED,newDiffMode:this.diffMode}),n&&(this.transitionVal=1,this.renderDiff()),e===r.DIFF_MODES.SIDE_BY_SIDE&&(this.changeMainModelVisibility(!0),this.changeSecondaryModelVisibility(!0)),Bimfish.Viewing.Private.fadeValue(this.transitionVal,1,this.duration,(function(e){t.transitionVal=e,t.renderDiff()}))}},{key:"getDiffMode",value:function(){return this.diffMode}},{key:"setSplitLineWidth",value:function(e){this.splitLineWidth=e,this.renderDiff()}},{key:"setSplitLineColor",value:function(e){this.splitLineColor=new THREE.Color(e),this.renderDiff()}},{key:"setChangeOffsetMode",value:function(e){this.changeOffsetMode=e}},{key:"resetOffset",value:function(){this.initVirtualCamera()}},{key:"changeColorIntensity",value:function(e){this.colorIntensity=e,this.renderDiff()}},{key:"changeModelVisibility",value:function(e,n){(n||this.getDiffMode()!==r.DIFF_MODES.SIDE_BY_SIDE)&&(this.modelHiddenMap[e]=!n,!n&&this.modelHiddenMap[1-e]&&this.changeModelVisibility(1-e,!0),this.viewer.dispatchEvent({type:r.EVENTS.DIFF_TOOL_MODEL_VISIBILITY_CHANGED}),this.renderDiff())}},{key:"changeMainModelVisibility",value:function(e){this.changeModelVisibility(0,e)}},{key:"changeSecondaryModelVisibility",value:function(e){this.changeModelVisibility(1,e)}},{key:"getMainModelVisibility",value:function(){return!this.modelHiddenMap[0]}},{key:"getSecondaryModelVisibility",value:function(){return!this.modelHiddenMap[1]}}])&&c(t.prototype,l),m&&c(t,m),n}(),v=AutodeskNamespace("Bimfish.Viewing.PixelCompare");v.DIFF_MODES=Object.assign({},r.DIFF_MODES),v.EVENTS=Object.assign({},r.EVENTS),Bimfish.Viewing.theExtensionManager.registerExtension("Bimfish.Viewing.PixelCompare",m)},"./extensions/PixelCompare/PixelCompareConstants.js":
/*!**********************************************************!*\
  !*** ./extensions/PixelCompare/PixelCompareConstants.js ***!
  \**********************************************************/
/*! exports provided: DIFF_MODES, DIFF_MODES_SHADER, EVENTS, DEFAULTS, DIFF_CONTROL_GROUP_ID */function(e,n,t){"use strict";var i;function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}t.r(n),t.d(n,"DIFF_MODES",(function(){return r})),t.d(n,"DIFF_MODES_SHADER",(function(){return a})),t.d(n,"EVENTS",(function(){return s})),t.d(n,"DEFAULTS",(function(){return l})),t.d(n,"DIFF_CONTROL_GROUP_ID",(function(){return d}));var r={OVERLAY:"overlay",SIDE_BY_SIDE:"sidebyside"},a=(o(i={},r.OVERLAY,0),o(i,r.SIDE_BY_SIDE,1),i),s={DIFF_TOOL_DIFF_MODE_CHANGED:"diff.tool.diff.mode.changed",DIFF_TOOL_DEACTIVATED:"diff.tool.deactivated",DIFF_TOOL_MODEL_VISIBILITY_CHANGED:"diff.tool.model.visibility.changed"},l={SPLIT_LINE_MARGIN:50,SPLIT_LINE_POSITION:.5,SPLIT_LINE_WIDTH:1,SPLIT_LINE_COLOR:7580136,ANIMATION_DURATION:.3,DEFAULT_DIFF_MODE:r.OVERLAY},d="pixel_compare_control_group"},"./extensions/PixelCompare/PixelCompareTool.js":
/*!*****************************************************!*\
  !*** ./extensions/PixelCompare/PixelCompareTool.js ***!
  \*****************************************************/
/*! exports provided: default */function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return a}));var i=t(/*! ./PixelCompareConstants */"./extensions/PixelCompare/PixelCompareConstants.js");function o(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=Bimfish.Viewing,a=function(){function e(n){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.extension=n,this.viewer=n.viewer,this.options=n.options,this.setGlobalManager(this.viewer.globalManager),this.names=["pixelCompare"],this.splitLineMinTouchArea=Bimfish.Viewing.isMobileDevice()?44:10,this.splitLineLimit=i.DEFAULTS.SPLIT_LINE_MARGIN}var n,t,r;return n=e,(t=[{key:"getNames",value:function(){return this.names}},{key:"getName",value:function(){return this.names[0]}},{key:"getCursor",value:function(){return this.lastMouseEvent&&this.extension.diffMode===i.DIFF_MODES.SIDE_BY_SIDE&&this.intersectSplitLine(this.lastMouseEvent)&&!this.rightClickDragging?"col-resize":this.extension.changeOffsetMode?"move":null}},{key:"isActive",value:function(){return this.isActive}},{key:"activate",value:function(e){e!==this.getName()||this.isActive||(this.isActive=!0)}},{key:"deactivate",value:function(e){e===this.getName()&&this.isActive&&(this.isActive=!1)}},{key:"getRelativeX",value:function(e){var n=this.viewer.impl.getCanvasBoundingClientRect();return e.canvasX/n.width}},{key:"intersectSplitLine",value:function(e){var n=this.getRelativeX(e),t=this.viewer.impl.getCanvasBoundingClientRect().width;return Math.abs(n-this.extension.splitPosition)*t<Math.max(this.extension.splitLineWidth,this.splitLineMinTouchArea)}},{key:"clientToWorld",value:function(e,n){var t=this.viewer.impl.clientToViewport(e,n);return t.unproject(this.viewer.getCamera()),t}},{key:"handleButtonDown",value:function(e,n){return this.extension.diffMode===i.DIFF_MODES.SIDE_BY_SIDE&&this.intersectSplitLine(e)?(this.draggingSplitLine=!0,!0):(this.extension.changeOffsetMode&&Bimfish.Viewing.Private.isRightClick(e,this.viewer.navigation)&&(this.extension.changeOffsetMode=!1,this.rightClickDragging=!0),!1)}},{key:"handleButtonUp",value:function(e,n){var t=!1;return this.extension.diffMode===i.DIFF_MODES.SIDE_BY_SIDE&&(t=this.draggingSplitLine,this.draggingSplitLine=!1),this.rightClickDragging&&(this.extension.changeOffsetMode=!0,this.rightClickDragging=!1),t}},{key:"handleMouseMove",value:function(e){if(this.lastMouseEvent=e,this.draggingSplitLine&&this.extension.diffMode===i.DIFF_MODES.SIDE_BY_SIDE){var n=this.getRelativeX(e),t=this.viewer.impl.getCanvasBoundingClientRect().width,o=n*t;return o>=this.splitLineLimit&&o<=t-this.splitLineLimit&&this.extension.setSplitPosition(n),!0}return!1}},{key:"handleKeyDown",value:function(e,n){if(this.extension.changeOffsetMode){var t;switch(n){case Bimfish.Viewing.KeyCode.LEFT:case Bimfish.Viewing.KeyCode.a:t=new THREE.Vector3(1,0,0);break;case Bimfish.Viewing.KeyCode.RIGHT:case Bimfish.Viewing.KeyCode.d:t=new THREE.Vector3(-1,0,0);break;case Bimfish.Viewing.KeyCode.UP:case Bimfish.Viewing.KeyCode.w:t=new THREE.Vector3(0,1,0);break;case Bimfish.Viewing.KeyCode.DOWN:case Bimfish.Viewing.KeyCode.s:t=new THREE.Vector3(0,-1,0)}if(t){var i=this.viewer.getCamera(),o=this.clientToWorld(t.x,t.y).sub(this.clientToWorld(0,0));return i.position.add(o),i.target.add(o),i.dirty=!0,i.updateCameraMatrices(),!0}return!1}}},{key:"handleGesture",value:function(e){switch(e.type){case"dragstart":return this.handleButtonDown(e);case"dragmove":return this.handleMouseMove(e);case"dragend":return this.handleButtonUp(e)}return!1}}])&&o(n.prototype,t),r&&o(n,r),e}();r.GlobalManagerMixin.call(a.prototype)},"./extensions/PixelCompare/PixelCompareUI.js":
/*!***************************************************!*\
  !*** ./extensions/PixelCompare/PixelCompareUI.js ***!
  \***************************************************/
/*! exports provided: default */function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return a}));var i=t(/*! ./PixelCompareConstants */"./extensions/PixelCompare/PixelCompareConstants.js");t(/*! ./PixelCompareUI.scss */"./extensions/PixelCompare/PixelCompareUI.scss");function o(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r=Bimfish.Viewing,a=function(){function e(n){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.extension=n,this.viewer=n.viewer,this.options=n.options,this.viewerContainer=this.viewer.container,this.setGlobalManager(this.viewer.globalManager)}var n,t,r;return n=e,(t=[{key:"createUI",value:function(){var e=this,n=this.getDocument();this.documents=[this.extension.mainModelInfo,this.extension.secondaryModelInfo];var t=Bimfish.Viewing.i18n.translate("Compared Documents");this.panel=new Bimfish.Viewing.UI.DockingPanel(this.viewerContainer,"ComparePanel",t,{addFooter:!1}),this.panel.container.classList.add("ComparePanel");var o=this.panel.createScrollContainer();this.mainContainer=n.createElement("div"),this.mainContainer.className="ComparePanel__main-container",this.createButtonsContainer(),this.itemsContainer=n.createElement("div"),this.itemsContainer.className="ComparePanel__items-container",this.mainContainer.appendChild(this.itemsContainer),this.colorStrips=[],this.documentContainers=[],this.visibilityButtons=[],this.labels=[],this.colorButtonStateBackup=void 0,this.documents.forEach((function(n,t){e.createDocumentContainer(n,t)})),this.onDiffModeChanged(),o.appendChild(this.mainContainer),this.panel.setVisible(!0),this.toolbarVisibilityBackup={},this.addToolbar(),this.toggleColorStrips(!0),this.panel.addVisibilityListener((function(n){var t=n?Bimfish.Viewing.UI.Button.State.ACTIVE:Bimfish.Viewing.UI.Button.State.INACTIVE;e.toolbarControls.showPanelButton.setState(t);var i=n?"Close Panel":"Open Panel";e.toolbarControls.showPanelButton.setToolTip(Bimfish.Viewing.i18n.t(i))})),this.onDiffModeChangedBinded=this.onDiffModeChanged.bind(this),this.updateVisibilityButtonsBinded=this.updateVisibilityButtons.bind(this),this.viewer.addEventListener(i.EVENTS.DIFF_TOOL_DIFF_MODE_CHANGED,this.onDiffModeChangedBinded),this.viewer.addEventListener(i.EVENTS.DIFF_TOOL_MODEL_VISIBILITY_CHANGED,this.updateVisibilityButtonsBinded)}},{key:"destroyUI",value:function(){this.panel.uninitialize(),this.hadToolbar?this.toolbar.removeControl(i.DIFF_CONTROL_GROUP_ID):(this.viewerContainer.removeChild(this.toolbar.container),this.viewer.toolbar=void 0),this.toolbar=null,this.clearLabels(),this.colorStrips=null,this.documentContainer=null,this.documents=null,this.colorButtonStateBackup=void 0,this.restoreLMVToolbar(),this.toolbarVisibilityBackup={},this.viewer.removeEventListener(i.EVENTS.DIFF_TOOL_DIFF_MODE_CHANGED,this.onDiffModeChangedBinded),this.viewer.removeEventListener(i.EVENTS.DIFF_TOOL_MODEL_VISIBILITY_CHANGED,this.updateVisibilityButtonsBinded)}},{key:"hideLMVToolbar",value:function(){var e=this,n=this.viewer.getToolbar&&this.viewer.getToolbar();n&&n._controls.forEach((function(n){e.toolbarVisibilityBackup[n.getId()]=n.isVisible(),n.getId()!==Bimfish.Viewing.TOOLBAR.NAVTOOLSID&&n.setVisible(!1)}))}},{key:"restoreLMVToolbar",value:function(){var e=this,n=this.viewer.getToolbar&&this.viewer.getToolbar();n&&n._controls.forEach((function(n){n.setVisible(e.toolbarVisibilityBackup[n.getId()])}))}},{key:"createButtonsContainer",value:function(){var e=this.getDocument().createElement("div");e.className="ComparePanel__buttons-container",this.mainContainer.appendChild(e),this.colorButton=this.createColorButton(),e.appendChild(this.colorButton.container),this.moveButton=this.createMoveButton(),e.appendChild(this.moveButton.container)}},{key:"toggleColorStrips",value:function(e){this.colorStrips.forEach((function(n){e?n.classList.add("active"):n.classList.remove("active")})),this.extension.changeColorIntensity(e?1:0)}},{key:"colorButtonOnClick",value:function(){this.colorButton.getState()===Bimfish.Viewing.UI.Button.State.ACTIVE?(this.toggleColorStrips(!1),this.colorButton.setState(Bimfish.Viewing.UI.Button.State.INACTIVE),this.colorButton.setIcon("pixelCompareFont-show-colors-btn"),this.colorButton.setToolTip(Bimfish.Viewing.i18n.translate("Show colors"))):(this.toggleColorStrips(!0),this.colorButton.setState(Bimfish.Viewing.UI.Button.State.ACTIVE),this.colorButton.setIcon("pixelCompareFont-hide-colors-btn"),this.colorButton.setToolTip(Bimfish.Viewing.i18n.translate("Hide colors")))}},{key:"createColorButton",value:function(){var e=new Bimfish.Viewing.UI.Button("compare-panel-color-button");return e.setIcon("pixelCompareFont-show-colors-btn"),e.setToolTip(Bimfish.Viewing.i18n.translate("Show colors")),e.addEventListener("click",this.colorButtonOnClick.bind(this)),e.setState(Bimfish.Viewing.UI.Button.State.ACTIVE),e}},{key:"isMoveActive",value:function(){return this.moveButton&&this.moveButton.getState()===Bimfish.Viewing.UI.Button.State.ACTIVE}},{key:"moveButtonOnClick",value:function(){var e=this.moveButton.getState();e===Bimfish.Viewing.UI.Button.State.INACTIVE?(this.moveButton.setState(Bimfish.Viewing.UI.Button.State.ACTIVE),this.documentContainers[0].classList.add("align"),this.extension.setChangeOffsetMode(!0),this.moveButton.setToolTip(Bimfish.Viewing.i18n.translate("Finish align"))):e===Bimfish.Viewing.UI.Button.State.ACTIVE&&(this.moveButton.setState(Bimfish.Viewing.UI.Button.State.INACTIVE),this.extension.setChangeOffsetMode(!1),this.documentContainers[0].classList.remove("align"),this.moveButton.setToolTip(Bimfish.Viewing.i18n.translate("Align")))}},{key:"createMoveButton",value:function(){var e=new Bimfish.Viewing.UI.Button("compare-panel-move-button");return e.setIcon("pixelCompareFont-move-btn"),e.setToolTip(Bimfish.Viewing.i18n.translate("Align")),e.addEventListener("click",this.moveButtonOnClick.bind(this)),e}},{key:"createDocumentContainer",value:function(e,n){var t=this,i=this.getDocument(),o=i.createElement("div");o.className="ComparePanel__document-container",this.itemsContainer.appendChild(o),this.documentContainers.push(o);var r=i.createElement("div");r.className="ComparePanel__doc-title",r.textContent=e.title||"".concat(Bimfish.Viewing.i18n.translate("Document")," ").concat(n+1),o.appendChild(r);var a=i.createElement("div");a.className="ComparePanel__doc-description treeview",o.appendChild(a);var s=i.createElement("div");s.className="ComparePanel__doc-version",a.appendChild(s);var l=i.createElement("div");l.className="ComparePanel__doc-color",l.classList.add(["red","blue"][n]),s.appendChild(l),this.colorStrips.push(l);var d=i.createElement("div");d.className="ComparePanel__doc-version-text",d.textContent=e.version?"v".concat(e.version):n+1,s.appendChild(d);var c=i.createElement("div");if(c.className="ComparePanel__doc-description-data",a.appendChild(c),e.creator&&e.creationTime){var f=i.createElement("div");f.textContent="".concat(Bimfish.Viewing.i18n.translate("Uploaded By"),": ").concat(e.creator),c.appendChild(f);var u=i.createElement("div"),h=e.creationTime;u.textContent="".concat(Bimfish.Viewing.i18n.translate("At"),": ").concat(h),c.appendChild(u)}var p=i.createElement("div");p.className="visibility",p.addEventListener("click",(function(){0===n?t.extension.changeMainModelVisibility(!t.extension.getMainModelVisibility()):t.extension.changeSecondaryModelVisibility(!t.extension.getSecondaryModelVisibility())}));var m=i.createElement("div");m.appendChild(p),this.visibilityButtons.push(m),a.appendChild(m)}},{key:"clearLabels",value:function(){var e=this;this.labels.forEach((function(n){e.viewerContainer.removeChild(n)})),this.labels=[]}},{key:"onDiffModeChanged",value:function(){var e=this,n=function(n){if(e.documents[n].title){var t="v".concat(e.documents[n].version)||!1;return"".concat(e.documents[n].title," ").concat(t)}return"".concat(Bimfish.Viewing.i18n.translate("Document")," ").concat(n+1)},t=["left","right"];this.clearLabels(),this.extension.getDiffMode()===i.DIFF_MODES.SIDE_BY_SIDE?(this.documents.forEach((function(i,o){e.createLabel(n(o),t[o])})),this.colorButtonStateBackup=this.colorButton.getState(),this.colorButtonStateBackup===Bimfish.Viewing.UI.Button.State.ACTIVE&&this.colorButtonOnClick(),this.colorButton.setState(Bimfish.Viewing.UI.Button.State.DISABLED)):(this.createLabel("".concat(n(0)," vs. ").concat(n(1)),"left"),void 0!==this.colorButtonStateBackup&&(this.colorButtonStateBackup===Bimfish.Viewing.UI.Button.State.ACTIVE&&this.colorButtonOnClick(),this.colorButton.setState(this.colorButtonStateBackup))),this.updateVisibilityButtons()}},{key:"updateVisibilityButtons",value:function(){for(var e=0;e<=1;e++)this.visibilityButtons[e].className=this.extension.modelHiddenMap[e]?"dim":"",this.visibilityButtons[e].style.opacity=this.extension.getDiffMode()===i.DIFF_MODES.SIDE_BY_SIDE?.3:1}},{key:"createLabel",value:function(e,n){var t=this.getDocument().createElement("div");t.className="CompareUI__label",t.textContent=e,"left"===n?t.style.left="0px":t.style.right="0px",this.viewerContainer.appendChild(t),this.labels.push(t)}},{key:"sideBySideButtonOnClick",value:function(){this.toolbarControls.sideBySideButton.getState()===Bimfish.Viewing.UI.Button.State.INACTIVE&&(this.toolbarControls.sideBySideButton.setState(Bimfish.Viewing.UI.Button.State.ACTIVE),this.showDiffButton.setIcon("pixelCompareFont-sidebyside-btn"),this.extension.setDiffMode(i.DIFF_MODES.SIDE_BY_SIDE),this.isMoveActive()&&this.moveButtonOnClick()),this.showDiffButton.onClick=this.showDiffButton.arrowButton.onClick}},{key:"overlayButtonOnClick",value:function(){this.toolbarControls.overlayButton.getState()===Bimfish.Viewing.UI.Button.State.INACTIVE&&(this.toolbarControls.overlayButton.setState(Bimfish.Viewing.UI.Button.State.ACTIVE),this.showDiffButton.setIcon("pixelCompareFont-overlay-btn"),this.extension.setDiffMode(i.DIFF_MODES.OVERLAY)),this.showDiffButton.onClick=this.showDiffButton.arrowButton.onClick}},{key:"showPanelOnClick",value:function(){var e=this.panel.isVisible();this.panel.setVisible(!e)}},{key:"exitButtonOnClick",value:function(){this.toolbarControls.exitButton.getState()===Bimfish.Viewing.UI.Button.State.INACTIVE?(this.toolbarControls.exitButton.setState(Bimfish.Viewing.UI.Button.State.ACTIVE),this.extension.deactivate()):this.toolbarControls.exitButton.setState(Bimfish.Viewing.UI.Button.State.INACTIVE)}},{key:"addToolbar",value:function(){this.hadToolbar=!!this.viewer.getToolbar(),this.hadToolbar||(this.viewer._createToolbar(),this.viewer.loadExtension("Bimfish.DefaultTools.NavTools",this.viewer.config)),this.hideLMVToolbar(),this.toolbar=this.viewer.getToolbar(),this.toolbarControls={},this.viewerToolbarDiffGroup=new Bimfish.Viewing.UI.ControlGroup(i.DIFF_CONTROL_GROUP_ID),this.toolbar.addControl(this.viewerToolbarDiffGroup),this.toolbar.container.classList.add("CompareUI__toolbar"),this.viewerContainer.appendChild(this.toolbar.container),this.showDiffButton=new Bimfish.Viewing.UI.ComboButton("diff-tool-button-combo"),this.showDiffButton.setIcon("pixelCompareFont-overlay-btn"),this.showDiffButton.setToolTip(Bimfish.Viewing.i18n.translate("Show Differences")),this.showDiffButton.setState(Bimfish.Viewing.UI.Button.State.INACTIVE),this.showDiffButton.setDisplay("block"),this.viewerToolbarDiffGroup.addControl(this.showDiffButton),this.toolbarControls.sideBySideButton=new Bimfish.Viewing.UI.Button("diff-tool-button-sidebyside-diff"),this.toolbarControls.sideBySideButton.setIcon("pixelCompareFont-sidebyside-btn"),this.toolbarControls.sideBySideButton.setToolTip(Bimfish.Viewing.i18n.translate("Side by Side")),this.toolbarControls.sideBySideButton.onClick=this.sideBySideButtonOnClick.bind(this),this.showDiffButton.addControl(this.toolbarControls.sideBySideButton),this.toolbarControls.overlayButton=new Bimfish.Viewing.UI.Button("diff-tool-button-overlay-diff"),this.toolbarControls.overlayButton.setIcon("pixelCompareFont-overlay-btn"),this.toolbarControls.overlayButton.setToolTip(Bimfish.Viewing.i18n.translate("Overlay")),this.toolbarControls.overlayButton.onClick=this.overlayButtonOnClick.bind(this),this.showDiffButton.addControl(this.toolbarControls.overlayButton),this.extension.getDiffMode()===i.DIFF_MODES.SIDE_BY_SIDE?this.toolbarControls.sideBySideButton.onClick():this.toolbarControls.overlayButton.onClick(),this.toolbarControls.showPanelButton=new Bimfish.Viewing.UI.Button("diff-tool-button-changes"),this.toolbarControls.showPanelButton.setIcon("pixelCompareFont-panel-btn"),this.toolbarControls.showPanelButton.onClick=this.showPanelOnClick.bind(this),this.toolbarControls.showPanelButton.setToolTip(Bimfish.Viewing.i18n.translate("Close Panel")),this.toolbarControls.showPanelButton.setState(Bimfish.Viewing.UI.Button.State.ACTIVE),this.viewerToolbarDiffGroup.addControl(this.toolbarControls.showPanelButton),this.toolbarControls.exitButton=new Bimfish.Viewing.UI.Button("diff-tool-button-exit"),this.toolbarControls.exitButton.setIcon("pixelCompareFont-exit-compare-btn"),this.toolbarControls.exitButton.setToolTip(Bimfish.Viewing.i18n.translate("Exit comparing")),this.toolbarControls.exitButton.onClick=this.exitButtonOnClick.bind(this),this.viewerToolbarDiffGroup.addControl(this.toolbarControls.exitButton)}}])&&o(n.prototype,t),r&&o(n,r),e}();r.GlobalManagerMixin.call(a.prototype)},"./extensions/PixelCompare/PixelCompareUI.scss":
/*!*****************************************************!*\
  !*** ./extensions/PixelCompare/PixelCompareUI.scss ***!
  \*****************************************************/
/*! no static exports found */function(e,n,t){var i=t(/*! !../../node_modules/css-loader!../../node_modules/sass-loader/dist/cjs.js!./PixelCompareUI.scss */"./node_modules/css-loader/index.js!./node_modules/sass-loader/dist/cjs.js!./extensions/PixelCompare/PixelCompareUI.scss");"string"==typeof i&&(i=[[e.i,i,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(/*! ../../node_modules/style-loader/lib/addStyles.js */"./node_modules/style-loader/lib/addStyles.js")(i,o);i.locals&&(e.exports=i.locals)},"./extensions/PixelCompare/shaders/DiffShader.js":
/*!*******************************************************!*\
  !*** ./extensions/PixelCompare/shaders/DiffShader.js ***!
  \*******************************************************/
/*! exports provided: DiffShader */function(e,n,t){"use strict";t.r(n),t.d(n,"DiffShader",(function(){return l}));var i=t(/*! ../../../src/wgs/render/ShaderChunks */"./src/wgs/render/ShaderChunks.js"),o=t(/*! ./diff_vert.glsl */"./extensions/PixelCompare/shaders/diff_vert.glsl"),r=t.n(o),a=t(/*! ./diff_frag.glsl */"./extensions/PixelCompare/shaders/diff_frag.glsl"),s=t.n(a),l={uniforms:THREE.UniformsUtils.merge([i.ShaderChunks.DepthTextureUniforms,{diff_threshold:{type:"f",value:.1},texture1:{type:"t",value:null},texture2:{type:"t",value:null},resolution:{type:"v2",value:new THREE.Vector2(1/1024,1/512)},splitPosition:{type:"f",value:0},splitLineColor:{type:"c",value:null},diffMode:{type:"i",value:0},splitLineWidth:{type:"f",value:1},colorIntensity:{type:"f",value:1},t:{type:"f",value:1},mainModelHidden:{type:"i",value:0},secondaryModelHidden:{type:"i",value:0},visibleModelBounds:{type:"v4",value:new THREE.Vector4}}]),vertexShader:r.a,fragmentShader:s.a}},"./extensions/PixelCompare/shaders/diff_frag.glsl":
/*!********************************************************!*\
  !*** ./extensions/PixelCompare/shaders/diff_frag.glsl ***!
  \********************************************************/
/*! no static exports found */function(e,n){e.exports="#define OVERLAY 0\n#define SIDE_BY_SIDE 1\n#define FXAA_EDGE_SHARPNESS (8.0)\n#define FXAA_EDGE_THRESHOLD (0.125)\n#define FXAA_EDGE_THRESHOLD_MIN (0.05)\n#define FXAA_RCP_FRAME_OPT (0.5)\n#define FXAA_RCP_FRAME_OPT2 (2.0)\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform float diff_threshold;\nuniform highp vec2 resolution;\nuniform int diffMode;\nuniform float colorIntensity;\nuniform bool mainModelHidden;\nuniform bool secondaryModelHidden;\nuniform vec4 visibleModelBounds;\nvarying vec2 vUv;\nuniform float splitPosition;\nuniform highp float splitLineWidth;\nuniform vec3 splitLineColor;\nuniform highp float t;\nfloat toGrayscale(vec4 v) {\n    return dot(v.rgb, vec3(0.299, 0.587, 0.114));\n}\nfloat getGrayAt(sampler2D texture, float i, float j) {\n    vec4 tex = texture2D(texture, vUv + resolution*vec2(i, j));\n    float gray = toGrayscale(tex);\n    return gray;\n}\nfloat getDarkestGray(float i, float j) {\n    float gray1 = mainModelHidden ? 1.0 : getGrayAt(texture1, i, j);\n    float gray2 = secondaryModelHidden ? 1.0 : getGrayAt(texture2, i, j);\n    return min(gray1, gray2);\n}\nfloat getDeltaAt(float i, float j) {\n    float gray1 = mainModelHidden ? 1.0 : getGrayAt(texture1, i, j);\n    float gray2 = secondaryModelHidden ? 1.0 : getGrayAt(texture2, i, j);\n    return gray1 - gray2;\n}\nvec4 getColorAt(float i, float j) {\n    if (mainModelHidden || secondaryModelHidden) {\n        if (vUv.x <= visibleModelBounds.x || vUv.y <= visibleModelBounds.y || vUv.x >= visibleModelBounds.z || vUv.y >= visibleModelBounds.w) {\n            if (mainModelHidden) {\n                return texture2D(texture2, vUv);\n            } else {\n                return texture2D(texture1, vUv);\n            }            \n        }\n    }\n    float maxGray = getDarkestGray(i, j);\n    float delta = getDeltaAt(i, j);\n    if (abs(delta) > diff_threshold) {\n        if (delta < 0.0) {\n            return vec4(colorIntensity, 0.0, 0.0, 1.0);\n        }\n        return vec4(0.0, 0.0, colorIntensity, 1.0);\n    }\n    return vec4(vec3(maxGray), 1.0);\n}\n#ifdef ANTI_ALIASING\n    void applyAntiAliasing() {\n        \n        float lumaNw = toGrayscale(getColorAt(-0.5, -0.5));\n        float lumaSw = toGrayscale(getColorAt(0.5, -0.5));\n        float lumaNe = toGrayscale(getColorAt(-0.5, 0.5)) + 1.0/384.0;\n        float lumaSe = toGrayscale(getColorAt(0.5, 0.5));\n        vec4 rgbaM = getColorAt(0.0, 0.0);\n        float lumaM = toGrayscale(rgbaM);\n        float lumaMax = max(max(lumaNe, lumaSe), max(lumaNw, lumaSw));\n        float lumaMin = min(min(lumaNe, lumaSe), min(lumaNw, lumaSw));\n        float lumaMaxSubMinM = max(lumaMax, lumaM) - min(lumaMin, lumaM);\n        float lumaMaxScaledClamped = max(FXAA_EDGE_THRESHOLD_MIN, lumaMax * FXAA_EDGE_THRESHOLD);\n        if (lumaMaxSubMinM < lumaMaxScaledClamped) {\n            gl_FragColor = rgbaM;\n            return;\n        }\n        float dirSwMinusNe = lumaSw - lumaNe;\n        float dirSeMinusNw = lumaSe - lumaNw;\n        vec2 dir1 = normalize(vec2(dirSwMinusNe + dirSeMinusNw, dirSwMinusNe - dirSeMinusNw));\n        vec3 rgbN1 = getColorAt((-dir1 * FXAA_RCP_FRAME_OPT).x ,(-dir1 * FXAA_RCP_FRAME_OPT).y).rgb;\n        vec3 rgbP1 = getColorAt((dir1 * FXAA_RCP_FRAME_OPT).x ,(dir1 * FXAA_RCP_FRAME_OPT).y).rgb;\n        float dirAbsMinTimesC = min(abs(dir1.x), abs(dir1.y)) * FXAA_EDGE_SHARPNESS;\n        vec2 dir2 = clamp(dir1.xy / dirAbsMinTimesC, -2.0, 2.0);\n        \n        vec3 rgbN2 = getColorAt((-dir2 * FXAA_RCP_FRAME_OPT2).x ,(-dir2 * FXAA_RCP_FRAME_OPT2).y).rgb;\n        vec3 rgbP2 = getColorAt((dir2 * FXAA_RCP_FRAME_OPT2).x ,(dir2 * FXAA_RCP_FRAME_OPT2).y).rgb;\n        vec3 rgbA = rgbN1 + rgbP1;\n        vec3 rgbB = ((rgbN2 + rgbP2) * 0.25) + (rgbA * 0.25);\n        float lumaB = toGrayscale(vec4(rgbB, 1.0));\n        float alpha = rgbaM.a;\n        \n        if ((lumaB < lumaMin) || (lumaB > lumaMax))\n            gl_FragColor = vec4(rgbA * 0.5, rgbaM.a);\n        else\n            gl_FragColor = vec4(rgbB, rgbaM.a);\n    }\n#endif\nvoid main() {\n    vec4 tex1 = texture2D(texture1, vUv);\n    \n    if (diffMode == SIDE_BY_SIDE) {\n        if (abs(vUv.x - splitPosition) <= splitLineWidth) {\n            gl_FragColor = vec4(mix(tex1.rgb, splitLineColor, t), 1.0);\n        } else {\n            vec4 tex = vUv.x < splitPosition ? tex1 : texture2D(texture2, vUv);\n            gl_FragColor = vec4(mix(tex1.rgb, tex.rgb, t), 1.0);\n        }\n    } else if (diffMode == OVERLAY) {\n        gl_FragColor = vec4(mix(tex1.rgb, getColorAt(0.0, 0.0).rgb, t), 1.0);\n        \n        #ifdef ANTI_ALIASING\n            float delta = getDeltaAt(0.0, 0.0);\n            if (abs(delta) > diff_threshold) {\n                return;\n            }\n            for (int i = -1; i <= 1; i++) {\n                for (int j = -1; j <= 1; j++) {\n                    if (i != 0 && j!= 0) {\n                        float delta = getDeltaAt(float(i), float(j));\n                        if (abs(delta) > diff_threshold) {\n                            applyAntiAliasing();\n                            return;\n                        }\n                    }\n                }\n            }\n        #endif\n    }\n}"},"./extensions/PixelCompare/shaders/diff_vert.glsl":
/*!********************************************************!*\
  !*** ./extensions/PixelCompare/shaders/diff_vert.glsl ***!
  \********************************************************/
/*! no static exports found */function(e,n){e.exports="varying vec2 vUv;\nuniform vec2 resolution;\nvoid main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}"},"./node_modules/css-loader/index.js!./node_modules/sass-loader/dist/cjs.js!./extensions/PixelCompare/PixelCompareUI.scss":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/dist/cjs.js!./extensions/PixelCompare/PixelCompareUI.scss ***!
  \**********************************************************************************************************************/
/*! no static exports found */function(e,n,t){(e.exports=t(/*! ../../node_modules/css-loader/lib/css-base.js */"./node_modules/css-loader/lib/css-base.js")(!1)).push([e.i,'.pixelCompareFont-compare-btn:before {\n  content: "\\E93C"; }\n\n.pixelCompareFont-overlay-btn:before {\n  content: "\\E93E"; }\n\n.pixelCompareFont-sidebyside-btn:before {\n  content: "\\E93F"; }\n\n.pixelCompareFont-exit-compare-btn:before {\n  content: "\\E93D"; }\n\n.pixelCompareFont-panel-btn:before {\n  content: "\\E940"; }\n\n.pixelCompareFont-show-colors-btn:before {\n  content: "\\E941"; }\n\n.pixelCompareFont-hide-colors-btn:before {\n  content: "\\E942"; }\n\n.pixelCompareFont-move-btn:before {\n  content: "\\E943"; }\n\n.CompareUI__toolbar {\n  z-index: 5; }\n\n.CompareUI__label {\n  position: absolute;\n  display: block;\n  border-radius: 5px;\n  background-color: rgba(78, 78, 78, 0.95);\n  top: 0px;\n  font-size: 12px;\n  color: #FFFFFF;\n  text-align: center;\n  margin: 10px;\n  padding: 10px;\n  white-space: pre;\n  pointer-events: none;\n  z-index: 5; }\n\n.docking-panel.ComparePanel {\n  top: 25%;\n  left: 10%;\n  width: 340px;\n  height: initial;\n  resize: none;\n  z-index: 5; }\n  .docking-panel.ComparePanel .adsk-button {\n    box-sizing: content-box; }\n  .docking-panel.ComparePanel .adsk-control-tooltip {\n    bottom: auto;\n    top: 120%; }\n  .docking-panel.ComparePanel .ComparePanel__main-container {\n    display: flex;\n    flex-direction: column; }\n    .docking-panel.ComparePanel .ComparePanel__main-container .ComparePanel__buttons-container {\n      background-color: rgba(0, 0, 0, 0.05);\n      padding: 10px;\n      text-align: center; }\n      .docking-panel.ComparePanel .ComparePanel__main-container .ComparePanel__buttons-container .adsk-button.inactive {\n        border: 1px solid #cccccc;\n        border-radius: 3px; }\n    .docking-panel.ComparePanel .ComparePanel__main-container .ComparePanel__items-container {\n      padding: 10px;\n      padding-top: 0px;\n      display: flex;\n      flex-direction: column; }\n      .docking-panel.ComparePanel .ComparePanel__main-container .ComparePanel__items-container .ComparePanel__document-container {\n        padding-left: 5px;\n        margin-left: -2px;\n        padding-bottom: 5px;\n        margin-top: 10px;\n        border: 1px solid rgba(0, 0, 0, 0); }\n        .docking-panel.ComparePanel .ComparePanel__main-container .ComparePanel__items-container .ComparePanel__document-container.align {\n          border: 1px solid #cccccc;\n          border-radius: 3px;\n          background-color: rgba(0, 0, 0, 0.05); }\n        .docking-panel.ComparePanel .ComparePanel__main-container .ComparePanel__items-container .ComparePanel__document-container .ComparePanel__doc-version {\n          display: flex;\n          width: 42px;\n          min-height: 30px;\n          border: 1px solid #cccccc;\n          border-radius: 3px;\n          background-color: rgba(0, 0, 0, 0.05);\n          margin-right: 10px;\n          font-weight: bold; }\n        .docking-panel.ComparePanel .ComparePanel__main-container .ComparePanel__items-container .ComparePanel__document-container .ComparePanel__doc-visibility {\n          display: flex;\n          width: 42px;\n          min-height: 30px;\n          border: 1px solid #cccccc;\n          border-radius: 3px;\n          background-color: rgba(0, 0, 0, 0.05);\n          margin-right: 10px;\n          font-weight: bold; }\n        .docking-panel.ComparePanel .ComparePanel__main-container .ComparePanel__items-container .ComparePanel__document-container .ComparePanel__doc-description-data {\n          margin-right: 40px; }\n        .docking-panel.ComparePanel .ComparePanel__main-container .ComparePanel__items-container .ComparePanel__document-container .ComparePanel__doc-version-text {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          width: 30px;\n          padding-left: 2px; }\n        .docking-panel.ComparePanel .ComparePanel__main-container .ComparePanel__items-container .ComparePanel__document-container .ComparePanel__doc-color {\n          border-radius: 3px 0 0 3px;\n          width: 5px;\n          height: 100%; }\n        .docking-panel.ComparePanel .ComparePanel__main-container .ComparePanel__items-container .ComparePanel__document-container .ComparePanel__doc-color.blue.active {\n          background-color: #0696D7; }\n        .docking-panel.ComparePanel .ComparePanel__main-container .ComparePanel__items-container .ComparePanel__document-container .ComparePanel__doc-color.red.active {\n          background-color: #FF0000; }\n        .docking-panel.ComparePanel .ComparePanel__main-container .ComparePanel__items-container .ComparePanel__document-container .ComparePanel__doc-title {\n          font-size: 15px;\n          font-weight: bold;\n          padding-bottom: 5px;\n          word-break: break-all; }\n        .docking-panel.ComparePanel .ComparePanel__main-container .ComparePanel__items-container .ComparePanel__document-container .ComparePanel__doc-description {\n          font-size: 13px;\n          line-height: 1.2;\n          font-weight: 300;\n          display: flex;\n          flex-direction: row; }\n\n@font-face {\n  font-family: \'pixelCompareFont\';\n  src: url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAlUAA0AAAAADOwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAJOAAAABwAAAAcgdOIaEdERUYAAAkcAAAAHAAAAB4AJwAXT1MvMgAAAaAAAAA/AAAAYA8TBkpjbWFwAAACBAAAAGAAAAFuAJHDXGdhc3AAAAkUAAAACAAAAAgAAAAQZ2x5ZgAAAogAAAVHAAAGuDC/sv9oZWFkAAABMAAAADUAAAA2EOq202hoZWEAAAFoAAAAIAAAACQH0wPGaG10eAAAAeAAAAAiAAAALgxlAspsb2NhAAACZAAAACQAAAAkCv4MnG1heHAAAAGIAAAAGAAAACAAGABabmFtZQAAB9AAAADlAAABv5krYsVwb3N0AAAIuAAAAFwAAACzVE7OgXicY2BkYGAA4g+t7hzx/DZfGbhZGEDgiucOSxB9s3CXLAPD/wMsAswHgFwOBiaQKAAgRwpEAAAAeJxjYGRgYD7w/wADAwsDA8P//ywCDEARFMAGAHhdBKF4nGNgZGBgEGSIYGBjAAEmBjQAAAtOAHN4nGNgZr7NOIGBlYGBaSbTGQYGhn4IzfiawZiRkwEVMAqgCTA4MDC+dGE+8P8AgwMzEIPUIMkqMDACAHGjC2gAeJxjYYAAxlAIzQTELBDmMiDuZggFw1cMaQxRDAwANtcEOwAAeJxjYGBgZoBgGQZGBhDIAPIYwXwWBh8gzcfAwcDEwAYUU3jJ+NLkpcv/v///g1UqvGQA8m0g/P9PxFnFLoudAevmY0AGjCDzGdmAmBkqwAQkmBgY0FQBLRzeAABnkBOjAAAAAAAIAAgAEAAYAJgA7AEyAYIBugHSAfACIAJYAsADGgNceJyFVE1sE0cUnrfj7DZO1s7au3ZsiO21sV2cYCde2xvnx3ECUVMof42dlqhBIUGEkFaAKghVC7htqIQgFbTKgYJS0UpUSiiQW2+hTShp1UiVKirEBfUQVEEPPZUe7E3frgk9VV3tm503773Z75v5ZgiQtYchJM2Q//NNhKw+NRF6kawjcdJOXiMEQn4rRCHgtzBckwecHCs6HXEVUokwJDKMEnc4uQiGWWk9SFwilHTGU8lEKMx5QAlGQf9KooUJ+MtD8QyjNtFp3s8vhrdH+qbPjPjqBtJTPI8jdAvPl6bk5q2RmgCvmlja0ttsWm7pZelNXjQzxDeaLZir9bi7QRzYuLfRKKcTPL9oronnj2bThyJTOA/P0+5qP6956repPpZTc2nKUdUerJnMpc0if5Oyk9kjkYK90aknVJv31tiasBpXgaKNmQjzgEikgaSRvU5bNnh6GEmOUrvBJcokZQ81yMgBkUVyyUQKl0JiiIEJFB1lZGuzDIpv5Mz0+JqrLetun5GkLWd7W1p6dWMe6PB1NHpi9mg+ri3pnk/dVo9ekw6vnNnbou+WiVwjr9BJeo3wxEZqST0hQRlBCIhCdgoiC4IshJ2yoEgKfRZoBSkgyElFElma01Iun88FnhWfVgc/LjzUVtNLS5rq9nrd0Sj8kPb+7XUzbS7finbE7WWOlRbhnYUVgKXSOZ+baXV706U7mza5fc+UQwZQM6PEiZohwLEeiHegPmIQsoDDC7KfFR0KyLhaKIyArGYMTbGiFxzxDITp9UscWERugcNXsgB3uTRvtlrN2iMmU1HJmazm0vxlzJDKGSJmgO8z/HKLnMQuGLWXrDicN3GVFWbLJU60ct9xIrf4AkZwT8+RbbRAs4RDhDIh9kBSScqCTFGzAiKTUbACAqOyJHPODpTst6kUc7Y0XmVzuWzM53r7pxaCB6dC1+3zIei/f780zsy7bKV9awna1VQ5aKxHnrjpFB0iFaQS10NSBEUA/B98UXxavM04So/p0BPtE2ZP8Rsmomsuj80sLRj5PCGyItSDENQr0BgiSZJ2CApaAX7VW1ooFiTaV5yhfYTFWglrx3AWjlQRK7EjRwKKEABZ51g2w0ejZHa2lC/Xlg36Zma0mdlZJgv1WiyvPclrj/rgHjpoOpfHpJ7W0mEikA04r4c1TrKKurdQiXXoJyBKYwBFV2N6U8TOrk8Mdp0eBdi9LxDclVNh4uP97zdyDc0729cJtM6/daB/eE+uW6kben37L1+Nx05Nf909+l5q8MT5iYk3NjiQxYHVIj1M95P1JEq24B/VGHB4BFkP43Rg3wL+cBTUlE11qmtgEhlQLaY1NBWI5p7QJQhNI6M1VXy4L1ubBmCFhoqD3YL06a74eQOqWLEuOdh1ahR2D/nrMj1qCM5M7n67zWN2K4n2mENgnvB5hyPz5cpAYnhnuspkkhwAYDt98DjUvtnRHtgxNHhwb3+P6jkw8Opvc++Ghz768GLrWx+ENu8ZOzI+NvKyx6mfDZb0oxau0QO4t1biIl6ykSjIKiC0gsA5VVRbDKxgRzZe/MbwimkH2amGVX3YC8GwGu4APWTI4Jhtxw6bbdB413p/Mb+Xak9UHz9eXX3B7b4Afzzv0hdLjczP/4Y08Xm3+B+TkfIduHrbVENvG5rCXa+kQYQKHmA5C170YRUXOqUfYtyJgBRWpbgDWqBVu6N9Dy1zc3MwlWtry2Wu5g8P92x+qetkU2c02tl0smt5OX+VuaXd1e5C+tYtzIvmHj7MZTpTPR6lsfPGjc7G+JXln650EvIPpdRymQB4nI2QMQrCQBBFfzQqRrASC6v1AkHBxgsIFiJYWNjFOISA7EqMingMD+AN7Ow9lbU/y/S6MMvbP//PLgugiycCVCtAhL5yDS2MlevUl8oh+aDcQAd35Sb1l3KEAT5MBWGbSs9PqLjGu4bKdepT5ZC8UW7wBTflJvWHcoQJ3jgjh+DCKkgpHCxwzuUiRZ468oqtDCfskdCClWSnfUL4GfxpWPvWkc2qZfg5MUaUpTjmzppxPPpjyMxLJeMZTdYbE54FO2pbXLnPfXDBqrwxQ86WJhMrRVLKzmyvZp66hXM2xhcXcEmzAAAAeJx9y7kOQGAUhNE7v32PN7m4jdryKkhENApvL2Fq05xM8YmT/9UicOLgiQcfAUJEiJEgRYYcBUpU4bLf59pE17Gp6uvUq1L+zuhARzrR+dPYGTtraUftATY7H90AAQAB//8AD3icY2BkYGDgAWIxIGZiYARCASBmAfMYAAROAD8AAAABAAAAANQYFhEAAAAA1Em4OQAAAADZcbod) format("woff");\n  font-weight: normal;\n  font-style: normal; }\n\n[class^="pixelCompareFont-"], [class*=" pixelCompareFont-"] {\n  font-family: \'pixelCompareFont\';\n  font-style: normal;\n  font-weight: normal;\n  font-variant: normal;\n  line-height: 1;\n  padding-top: 2px;\n  speak: none;\n  text-transform: none;\n  /* Better Font Rendering =========== */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale; }\n',""])},"./node_modules/css-loader/lib/css-base.js":
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */function(e,n){e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=function(e,n){var t=e[1]||"",i=e[3];if(!i)return t;if(n&&"function"==typeof btoa){var o=(a=i,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),r=i.sources.map((function(e){return"/*# sourceURL="+i.sourceRoot+e+" */"}));return[t].concat(r).concat([o]).join("\n")}var a;return[t].join("\n")}(n,e);return n[2]?"@media "+n[2]+"{"+t+"}":t})).join("")},n.i=function(e,t){"string"==typeof e&&(e=[[null,e,""]]);for(var i={},o=0;o<this.length;o++){var r=this[o][0];"number"==typeof r&&(i[r]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&i[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),n.push(a))}},n}},"./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */function(e,n,t){var i,o,r={},a=(i=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=i.apply(this,arguments)),o}),s=function(e,n){return n?n.querySelector(e):document.querySelector(e)},l=function(e){var n={};return function(e,t){if("function"==typeof e)return e();if(void 0===n[e]){var i=s.call(this,e,t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}n[e]=i}return n[e]}}(),d=null,c=0,f=[],u=t(/*! ./urls */"./node_modules/style-loader/lib/urls.js");function h(e,n){for(var t=0;t<e.length;t++){var i=e[t],o=r[i.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](i.parts[a]);for(;a<i.parts.length;a++)o.parts.push(x(i.parts[a],n))}else{var s=[];for(a=0;a<i.parts.length;a++)s.push(x(i.parts[a],n));r[i.id]={id:i.id,refs:1,parts:s}}}}function p(e,n){for(var t=[],i={},o=0;o<e.length;o++){var r=e[o],a=n.base?r[0]+n.base:r[0],s={css:r[1],media:r[2],sourceMap:r[3]};i[a]?i[a].parts.push(s):t.push(i[a]={id:a,parts:[s]})}return t}function m(e,n){var t=l(e.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=f[f.length-1];if("top"===e.insertAt)i?i.nextSibling?t.insertBefore(n,i.nextSibling):t.appendChild(n):t.insertBefore(n,t.firstChild),f.push(n);else if("bottom"===e.insertAt)t.appendChild(n);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=l(e.insertAt.before,t);t.insertBefore(n,o)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var n=f.indexOf(e);n>=0&&f.splice(n,1)}function g(e){var n=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var i=function(){0;return t.nc}();i&&(e.attrs.nonce=i)}return _(n,e.attrs),m(e,n),n}function _(e,n){Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])}))}function x(e,n){var t,i,o,r;if(n.transform&&e.css){if(!(r="function"==typeof n.transform?n.transform(e.css):n.transform.default(e.css)))return function(){};e.css=r}if(n.singleton){var a=c++;t=d||(d=g(n)),i=y.bind(null,t,a,!1),o=y.bind(null,t,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(e){var n=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",_(n,e.attrs),m(e,n),n}(n),i=b.bind(null,t,n),o=function(){v(t),t.href&&URL.revokeObjectURL(t.href)}):(t=g(n),i=A.bind(null,t),o=function(){v(t)});return i(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;i(e=n)}else o()}}e.exports=function(e,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=a()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var t=p(e,n);return h(t,n),function(e){for(var i=[],o=0;o<t.length;o++){var a=t[o];(s=r[a.id]).refs--,i.push(s)}e&&h(p(e,n),n);for(o=0;o<i.length;o++){var s;if(0===(s=i[o]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete r[s.id]}}}};var w,C=(w=[],function(e,n){return w[e]=n,w.filter(Boolean).join("\n")});function y(e,n,t,i){var o=t?"":i.css;if(e.styleSheet)e.styleSheet.cssText=C(n,o);else{var r=document.createTextNode(o),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(r,a[n]):e.appendChild(r)}}function A(e,n){var t=n.css,i=n.media;if(i&&e.setAttribute("media",i),e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}function b(e,n,t){var i=t.css,o=t.sourceMap,r=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||r)&&(i=u(i)),o&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([i],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}},"./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */function(e,n){e.exports=function(e){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var t=n.protocol+"//"+n.host,i=t+n.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,n){var o,r=n.trim().replace(/^"(.*)"$/,(function(e,n){return n})).replace(/^'(.*)'$/,(function(e,n){return n}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?e:(o=0===r.indexOf("//")?r:0===r.indexOf("/")?t+r:i+r.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")}))}},"./src/wgs/render/ShaderChunks.js":
/*!****************************************!*\
  !*** ./src/wgs/render/ShaderChunks.js ***!
  \****************************************/
/*! exports provided: CutPlanesUniforms, IdUniforms, ThemingUniform, ShadowMapCommonUniforms, ShadowMapUniforms, PointSizeUniforms, WideLinesUniforms, DepthTextureUniforms, GetPrismMapSampleChunk, GetPrismMapUniformChunk, resolve, PackDepthShaderChunk, TonemapShaderChunk, OrderedDitheringShaderChunk, CutPlanesShaderChunk, PackNormalsShaderChunk, HatchPatternShaderChunk, EnvSamplingShaderChunk, IdVertexDeclaration, IdVertexShaderChunk, IdFragmentDeclaration, IdOutputShaderChunk, FinalOutputShaderChunk, ThemingFragmentDeclaration, ThemingFragmentShaderChunk, InstancingVertexDeclaration, ShadowMapDeclareCommonUniforms, ShadowMapVertexDeclaration, ShadowMapVertexShaderChunk, ShadowMapFragmentDeclaration, PointSizeDeclaration, PointSizeShaderChunk, ShaderChunks */function(e,n,t){"use strict";t.r(n),t.d(n,"CutPlanesUniforms",(function(){return ue})),t.d(n,"IdUniforms",(function(){return he})),t.d(n,"ThemingUniform",(function(){return pe})),t.d(n,"ShadowMapCommonUniforms",(function(){return me})),t.d(n,"ShadowMapUniforms",(function(){return ve})),t.d(n,"PointSizeUniforms",(function(){return ge})),t.d(n,"WideLinesUniforms",(function(){return _e})),t.d(n,"DepthTextureUniforms",(function(){return xe})),t.d(n,"GetPrismMapSampleChunk",(function(){return Ae})),t.d(n,"GetPrismMapUniformChunk",(function(){return be})),t.d(n,"resolve",(function(){return Me})),t.d(n,"PackDepthShaderChunk",(function(){return De})),t.d(n,"TonemapShaderChunk",(function(){return Se})),t.d(n,"OrderedDitheringShaderChunk",(function(){return Be})),t.d(n,"CutPlanesShaderChunk",(function(){return Ie})),t.d(n,"PackNormalsShaderChunk",(function(){return Te})),t.d(n,"HatchPatternShaderChunk",(function(){return Pe})),t.d(n,"EnvSamplingShaderChunk",(function(){return ke})),t.d(n,"IdVertexDeclaration",(function(){return Ve})),t.d(n,"IdVertexShaderChunk",(function(){return Re})),t.d(n,"IdFragmentDeclaration",(function(){return Le})),t.d(n,"IdOutputShaderChunk",(function(){return Ne})),t.d(n,"FinalOutputShaderChunk",(function(){return Oe})),t.d(n,"ThemingFragmentDeclaration",(function(){return Ue})),t.d(n,"ThemingFragmentShaderChunk",(function(){return Fe})),t.d(n,"InstancingVertexDeclaration",(function(){return ze})),t.d(n,"ShadowMapDeclareCommonUniforms",(function(){return Ge})),t.d(n,"ShadowMapVertexDeclaration",(function(){return We})),t.d(n,"ShadowMapVertexShaderChunk",(function(){return je})),t.d(n,"ShadowMapFragmentDeclaration",(function(){return He})),t.d(n,"PointSizeDeclaration",(function(){return Ye})),t.d(n,"PointSizeShaderChunk",(function(){return Xe})),t.d(n,"ShaderChunks",(function(){return Qe}));var i=t(/*! three */"three"),o=t(/*! ./chunks/pack_depth.glsl */"./src/wgs/render/chunks/pack_depth.glsl"),r=t.n(o),a=t(/*! ./chunks/depth_texture.glsl */"./src/wgs/render/chunks/depth_texture.glsl"),s=t.n(a),l=t(/*! ./chunks/tonemap.glsl */"./src/wgs/render/chunks/tonemap.glsl"),d=t.n(l),c=t(/*! ./chunks/ordered_dither.glsl */"./src/wgs/render/chunks/ordered_dither.glsl"),f=t.n(c),u=t(/*! ./chunks/cutplanes.glsl */"./src/wgs/render/chunks/cutplanes.glsl"),h=t.n(u),p=t(/*! ./chunks/pack_normals.glsl */"./src/wgs/render/chunks/pack_normals.glsl"),m=t.n(p),v=t(/*! ./chunks/hatch_pattern.glsl */"./src/wgs/render/chunks/hatch_pattern.glsl"),g=t.n(v),_=t(/*! ./chunks/env_sample.glsl */"./src/wgs/render/chunks/env_sample.glsl"),x=t.n(_),w=t(/*! ./chunks/id_decl_vert.glsl */"./src/wgs/render/chunks/id_decl_vert.glsl"),C=t.n(w),y=t(/*! ./chunks/id_vert.glsl */"./src/wgs/render/chunks/id_vert.glsl"),A=t.n(y),b=t(/*! ./chunks/id_decl_frag.glsl */"./src/wgs/render/chunks/id_decl_frag.glsl"),E=t.n(b),M=t(/*! ./chunks/id_frag.glsl */"./src/wgs/render/chunks/id_frag.glsl"),D=t.n(M),S=t(/*! ./chunks/final_frag.glsl */"./src/wgs/render/chunks/final_frag.glsl"),B=t.n(S),I=t(/*! ./chunks/theming_decl_frag.glsl */"./src/wgs/render/chunks/theming_decl_frag.glsl"),T=t.n(I),P=t(/*! ./chunks/theming_frag.glsl */"./src/wgs/render/chunks/theming_frag.glsl"),k=t.n(P),V=t(/*! ./chunks/instancing_decl_vert.glsl */"./src/wgs/render/chunks/instancing_decl_vert.glsl"),R=t.n(V),L=t(/*! ./chunks/shadowmap_decl_common.glsl */"./src/wgs/render/chunks/shadowmap_decl_common.glsl"),N=t.n(L),O=t(/*! ./chunks/shadowmap_decl_vert.glsl */"./src/wgs/render/chunks/shadowmap_decl_vert.glsl"),U=t.n(O),F=t(/*! ./chunks/shadowmap_vert.glsl */"./src/wgs/render/chunks/shadowmap_vert.glsl"),z=t.n(F),G=t(/*! ./chunks/shadowmap_decl_frag.glsl */"./src/wgs/render/chunks/shadowmap_decl_frag.glsl"),W=t.n(G),j=t(/*! ./chunks/float3_average.glsl */"./src/wgs/render/chunks/float3_average.glsl"),H=t.n(j),Y=t(/*! ./chunks/line_decl_common.glsl */"./src/wgs/render/chunks/line_decl_common.glsl"),X=t.n(Y),Q=t(/*! ./chunks/prism_wood.glsl */"./src/wgs/render/chunks/prism_wood.glsl"),q=t.n(Q),Z=t(/*! ./chunks/prism_glazing.glsl */"./src/wgs/render/chunks/prism_glazing.glsl"),J=t.n(Z),K=t(/*! ./chunks/prism_transparency.glsl */"./src/wgs/render/chunks/prism_transparency.glsl"),$=t.n(K),ee=t(/*! ./chunks/normal_map.glsl */"./src/wgs/render/chunks/normal_map.glsl"),ne=t.n(ee),te=t(/*! ./chunks/decl_point_size.glsl */"./src/wgs/render/chunks/decl_point_size.glsl"),ie=t.n(te),oe=t(/*! ./chunks/point_size.glsl */"./src/wgs/render/chunks/point_size.glsl"),re=t.n(oe),ae=t(/*! ./chunks/wide_lines_decl.glsl */"./src/wgs/render/chunks/wide_lines_decl.glsl"),se=t.n(ae),le=t(/*! ./chunks/wide_lines_vert.glsl */"./src/wgs/render/chunks/wide_lines_vert.glsl"),de=t.n(le),ce=t(/*! ./chunks/hsv.glsl */"./src/wgs/render/chunks/hsv.glsl"),fe=t.n(ce),ue={cutplanes:{type:"v4v",value:[]},hatchParams:{type:"v2",value:new i.Vector2(1,10)},hatchTintColor:{type:"c",value:new i.Color(16777215)},hatchTintIntensity:{type:"f",value:1}},he={dbId:{type:"v3",value:new i.Vector3(0,0,0)},modelId:{type:"v3",value:new i.Vector3(0,0,0)}},pe={themingColor:{type:"v4",value:new i.Vector4(0,0,0,0)}},me={shadowESMConstant:{type:"f",value:0}},ve=i.UniformsUtils.merge([{shadowMap:{type:"t",value:null},shadowMapSize:{type:"v2",value:new i.Vector2(0,0)},shadowBias:{type:"f",value:0},shadowDarkness:{type:"f",value:0},shadowMatrix:{type:"m4",value:new i.Matrix4},shadowLightDir:{type:"v3",value:new i.Vector3}},me]),ge={point_size:{type:"f",value:1}},_e={view_size:{type:"v2",value:new i.Vector2(640,480)}},xe={tDepth:{type:"t",value:null},projInfo:{type:"v4",value:new i.Vector4},isOrtho:{type:"f",value:0},worldMatrix_mainPass:{type:"m4",value:new i.Matrix4}},we={};for(var Ce in i.ShaderChunk)we[Ce]=i.ShaderChunk[Ce];we.pack_depth=r.a,we.depth_texture=s.a,we.tonemap=d.a,we.ordered_dither=f.a,we.cutplanes=h.a,we.pack_normals=m.a,we.hatch_pattern=g.a,we.env_sample=x.a,we.id_decl_vert=C.a,we.id_vert=A.a,we.id_decl_frag=E.a,we.id_frag=D.a,we.final_frag=B.a,we.theming_decl_frag=T.a,we.theming_frag=k.a,we.instancing_decl_vert=R.a,we.shadowmap_decl_common=N.a,we.shadowmap_decl_vert=U.a,we.shadowmap_vert=z.a,we.shadowmap_decl_frag=W.a,we.float3_average=H.a,we.line_decl_common=X.a,we.prism_wood=q.a,we.prism_glazing=J.a,we.prism_transparency=$.a,we.normal_map=ne.a,we.decl_point_size=ie.a,we.point_size=re.a,we.wide_lines_decl=se.a,we.wide_lines_vert=de.a,we.hsv=fe.a;var ye={};function Ae(e,n,t,i){var o=t?"_v3":"",r=t?"vec3 ":"",a=t?n+" = average("+n+o+");":"",s=i?n+o+" = SRGBToLinear("+n+o+");":"";return["#if defined( USE_"+e.toUpperCase()+"_MAP )","vec2 uv_"+e+"_map = ("+e+"_map_texMatrix * vec3(uv, 1.0)).xy;",e.toUpperCase()+"_CLAMP_TEST;",r+n+o+" = texture2D("+e+"_map, uv_"+e+"_map).xyz;",s,"if("+e+"_map_invert) "+n+o+" = vec3(1.0) - "+n+o+";",a,"#else",n+" = "+e+";","#endif"].join("\n")}function be(e){var n=e+"_texMatrix",t=e+"_invert";return["#if defined( "+("USE_"+e).toUpperCase()+" )","uniform sampler2D "+e+";","uniform mat3 "+n+";","uniform bool "+t+";","#endif"].join("\n")}ye.prism_check=function(e){return["#if defined( USE_SURFACE_ALBEDO_MAP ) || defined( USE_SURFACE_ROUGHNESS_MAP ) || defined( USE_SURFACE_CUTOUT_MAP ) || defined( USE_SURFACE_ANISOTROPY_MAP ) || defined( USE_SURFACE_ROTATION_MAP ) || defined( USE_OPAQUE_ALBEDO_MAP ) || defined( USE_OPAQUE_F0_MAP ) || defined( USE_OPAQUE_LUMINANCE_MODIFIER_MAP ) || defined( USE_LAYERED_BOTTOM_F0_MAP ) || defined( USE_LAYERED_F0_MAP ) || defined( USE_LAYERED_DIFFUSE_MAP ) || defined( USE_LAYERED_FRACTION_MAP ) || defined( USE_LAYERED_ROUGHNESS_MAP ) || defined( USE_LAYERED_ANISOTROPY_MAP ) || defined( USE_LAYERED_ROTATION_MAP ) || defined( USE_METAL_F0_MAP ) || defined( USE_SURFACE_NORMAL_MAP ) || defined( USE_LAYERED_NORMAL_MAP )","#define "+e,"#endif"].join("\n")},ye.prism_sample_texture=function(e,n,t,i){return Ae(e,n,"true"===t,"true"===i)},ye.prism_uniforms=be,ye.prism_bump_uniforms=function(e){var n=e+"_texMatrix",t=e+"_bumpScale",i=e+"_bumpmapType";return["#if defined( "+("USE_"+e).toUpperCase()+" )","uniform sampler2D "+e+";","uniform mat3 "+n+";","uniform vec2 "+t+";","uniform int "+i+";","#endif"].join("\n")};var Ee={};for(Ce in ye)Ee[Ce]=new RegExp("#"+Ce+" *<([\\w\\d., ]*)>","g");var Me=function e(n){for(var t in ye){var i=Ee[t];n=n.replace(i,(function(e,n){var i=n.split(",").map((function(e){return e.trim()}));return ye[t].apply(null,i)}))}return n.replace(/#include *<([\w\d.]+)>/g,(function(n,t){if(!we[t])throw new Error("Cannot resolve #include<"+t+">");return e(we[t])}))},De=we.pack_depth,Se=we.tonemap,Be=we.ordered_dither,Ie=we.cutplanes,Te=we.pack_normals,Pe=we.hatch_pattern,ke=we.env_sample,Ve=we.id_decl_vert,Re=we.id_vert,Le=we.id_decl_frag,Ne=we.id_frag,Oe=we.final_frag,Ue=we.theming_decl_frag,Fe=we.theming_frag,ze=we.instancing_decl_vert,Ge=we.shadowmap_decl_common,We=we.shadowmap_decl_vert,je=we.shadowmap_vert,He=we.shadowmap_decl_frag,Ye=we.decl_point_size,Xe=we.point_size,Qe={IdUniforms:he,ThemingUniform:pe,CutPlanesUniforms:ue,ShadowMapCommonUniforms:me,ShadowMapUniforms:ve,PointSizeUniforms:ge,WideLinesUniforms:_e,DepthTextureUniforms:xe,PackDepthShaderChunk:De,TonemapShaderChunk:Se,OrderedDitheringShaderChunk:Be,CutPlanesShaderChunk:Ie,PackNormalsShaderChunk:Te,HatchPatternShaderChunk:Pe,EnvSamplingShaderChunk:ke,IdVertexDeclaration:Ve,IdVertexShaderChunk:Re,IdFragmentDeclaration:Le,IdOutputShaderChunk:Ne,FinalOutputShaderChunk:Oe,ThemingFragmentDeclaration:Ue,ThemingFragmentShaderChunk:Fe,InstancingVertexDeclaration:ze,ShadowMapDeclareCommonUniforms:Ge,ShadowMapVertexDeclaration:We,ShadowMapVertexShaderChunk:je,ShadowMapFragmentDeclaration:He,PointSizeDeclaration:Ye,PointSizeShaderChunk:Xe,GetPrismMapSampleChunk:Ae,GetPrismMapUniformChunk:be,resolve:Me}},"./src/wgs/render/ShaderPass.js":
/*!**************************************!*\
  !*** ./src/wgs/render/ShaderPass.js ***!
  \**************************************/
/*! exports provided: ShaderPass */function(e,n,t){"use strict";t.r(n),t.d(n,"ShaderPass",(function(){return r}));var i=t(/*! ./ShaderUtils */"./src/wgs/render/ShaderUtils.js"),o=t(/*! three */"three"),r=function(e,n){this.textureID=void 0!==n?n:"tDiffuse",this.material=Object(i.createShaderMaterial)(e),this.uniforms=this.material.uniforms,this.renderToScreen=!1,this.enabled=!0,this.clear=!1,this.camera=new o.OrthographicCamera(-1,1,1,-1,0,1);var t=new o.BufferGeometry,r=new Float32Array(9);r[0]=-1,r[1]=-1,r[2]=0,r[3]=3,r[4]=-1,r[5]=0,r[6]=-1,r[7]=3,r[8]=0;var a=new Float32Array(6);a[0]=0,a[1]=0,a[2]=2,a[3]=0,a[4]=0,a[5]=2;var s=new Float32Array(9);s[0]=0,s[1]=0,s[2]=1,s[3]=0,s[4]=0,s[5]=1,s[6]=0,s[7]=0,s[8]=1,t.addAttribute("position",new o.BufferAttribute(r,3)),t.addAttribute("normal",new o.BufferAttribute(s,3)),t.addAttribute("uv",new o.BufferAttribute(a,2)),this.quad=new o.Mesh(t,this.material),this.scene=new o.Scene,this.scene.add(this.quad)};r.prototype={render:function(e,n,t,i){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=t.texture||t),this.renderToScreen||!n?e.render(this.scene,this.camera):e.render(this.scene,this.camera,n,this.clear)}}},"./src/wgs/render/ShaderUtils.js":
/*!***************************************!*\
  !*** ./src/wgs/render/ShaderUtils.js ***!
  \***************************************/
/*! exports provided: createShaderMaterial, setMacro, removeMacro */function(e,n,t){"use strict";t.r(n),t.d(n,"createShaderMaterial",(function(){return o})),t.d(n,"setMacro",(function(){return r})),t.d(n,"removeMacro",(function(){return a}));var i=t(/*! three */"three"),o=function(e){var n={vertexShader:e.vertexShader,fragmentShader:e.fragmentShader};return e.uniforms&&(n.uniforms=i.UniformsUtils.clone(e.uniforms)),e.defines&&(n.defines=Object.assign({},e.defines)),e.extensions&&(n.extensions=Object.assign({},e.extensions)),e.attributes&&(n.attributes=e.attributes),new i.ShaderMaterial(n)},r=function(e,n,t){t=t||"",e.defines||(e.defines={}),e.defines[n]!=t&&(e.defines[n]=t,e.needsUpdate=!0)},a=function(e,n){(e.defines||e.defines[n])&&(delete e.defines[n],e.needsUpdate=!0)}},"./src/wgs/render/chunks/cutplanes.glsl":
/*!**********************************************!*\
  !*** ./src/wgs/render/chunks/cutplanes.glsl ***!
  \**********************************************/
/*! no static exports found */function(e,n){e.exports="#if NUM_CUTPLANES > 0\nuniform vec4 cutplanes[NUM_CUTPLANES];\nvoid checkCutPlanes(vec3 worldPosition) {\n    for (int i=0; i<NUM_CUTPLANES; i++) {\n        if (dot(vec4(worldPosition, 1.0), cutplanes[i]) > 0.0) {\n            discard;\n        }\n    }\n}\n#endif\n"},"./src/wgs/render/chunks/decl_point_size.glsl":
/*!****************************************************!*\
  !*** ./src/wgs/render/chunks/decl_point_size.glsl ***!
  \****************************************************/
/*! no static exports found */function(e,n){e.exports="uniform float point_size;"},"./src/wgs/render/chunks/depth_texture.glsl":
/*!**************************************************!*\
  !*** ./src/wgs/render/chunks/depth_texture.glsl ***!
  \**************************************************/
/*! no static exports found */function(e,n){e.exports="\nuniform sampler2D tDepth;\nuniform vec4 projInfo;\nuniform float isOrtho;\nuniform mat4 worldMatrix_mainPass;\nvec3 reconstructCSPosition(vec2 fragCoords, float z) {\n    return vec3((fragCoords * projInfo.xy + projInfo.zw) * mix(z, -1.0, isOrtho), z);\n}\nvec3 reconstructWorldPosition(vec2 fragCoords, vec2 screenUv) {\n    float zCam = texture2D(tDepth, screenUv).z;\n    vec3 csPos = reconstructCSPosition(fragCoords, zCam);\n    return (worldMatrix_mainPass * vec4(csPos, 1.0)).xyz;\n}\n"},"./src/wgs/render/chunks/env_sample.glsl":
/*!***********************************************!*\
  !*** ./src/wgs/render/chunks/env_sample.glsl ***!
  \***********************************************/
/*! no static exports found */function(e,n){e.exports="\nuniform float envRotationSin;\nuniform float envRotationCos;\nvec3 adjustLookupVector(in vec3 lookup) {\n    return vec3(\n            envRotationCos * lookup.x - envRotationSin * lookup.z,\n            lookup.y,\n            envRotationSin * lookup.x + envRotationCos * lookup.z);\n}\nvec3 RGBMDecode(in vec4 vRGBM, in float exposure) {\n    vec3 ret = vRGBM.rgb * (vRGBM.a * 16.0);\n    ret *= ret;\n    ret *= exposure;\n    return ret;\n}\nvec3 GammaDecode(in vec4 vRGBA, in float exposure) {\n    return vRGBA.xyz * vRGBA.xyz * exposure;\n}\nvec3 sampleIrradianceMap(vec3 dirWorld, samplerCube irrMap, float exposure) {\n    vec4 cubeColor4 = textureCube(irrMap, adjustLookupVector(dirWorld));\n#ifdef IRR_GAMMA\n    vec3 indirectDiffuse = GammaDecode(cubeColor4, exposure);\n#elif defined(IRR_RGBM)\n    vec3 indirectDiffuse = RGBMDecode(cubeColor4, exposure);\n#else\n    vec3 indirectDiffuse = cubeColor4.xyz;\n#ifdef GAMMA_INPUT\n    indirectDiffuse.xyz *= indirectDiffuse.xyz;\n#endif\n#endif\n    return indirectDiffuse;\n}\n"},"./src/wgs/render/chunks/final_frag.glsl":
/*!***********************************************!*\
  !*** ./src/wgs/render/chunks/final_frag.glsl ***!
  \***********************************************/
/*! no static exports found */function(e,n){e.exports="#ifdef HATCH_PATTERN\ngl_FragColor = calculateHatchPattern(hatchParams, gl_FragCoord.xy, gl_FragColor, hatchTintColor, hatchTintIntensity);\n#endif\n#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\ngl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif\n#ifdef MRT_NORMALS\noutNormal = vec4(geomNormal.x, geomNormal.y, depth, gl_FragColor.a < 1.0 ? 0.0 : 1.0);\n#endif\n#include<id_frag>\n"},"./src/wgs/render/chunks/float3_average.glsl":
/*!***************************************************!*\
  !*** ./src/wgs/render/chunks/float3_average.glsl ***!
  \***************************************************/
/*! no static exports found */function(e,n){e.exports="float averageOfFloat3(in vec3 value) { \n    const float oneThird = 1.0 / 3.0; \n    return dot(value, vec3(oneThird, oneThird, oneThird)); \n} \n"},"./src/wgs/render/chunks/hatch_pattern.glsl":
/*!**************************************************!*\
  !*** ./src/wgs/render/chunks/hatch_pattern.glsl ***!
  \**************************************************/
/*! no static exports found */function(e,n){e.exports="#ifdef HATCH_PATTERN\nuniform vec2 hatchParams;\nuniform vec3 hatchTintColor;\nuniform float hatchTintIntensity;\nfloat curveGaussian(float r, float invWidth) {\n    float amt = clamp(r * invWidth, 0.0, 1.0);\n    float exponent = amt * 3.5;\n    return exp(-exponent*exponent);\n}\nvec4 calculateHatchPattern(vec2 hatchParams, vec2 coord, vec4 fragColor, vec3 hatchTintColor, float hatchTintIntensity ) {\n    float hatchSlope = hatchParams.x;\n    float hatchPeriod = hatchParams.y;\n    if (abs(hatchSlope) <= 1.0) {\n        float hatchPhase = coord.y - hatchSlope * coord.x;\n        float dist = abs(mod((hatchPhase), (hatchPeriod)));\n        if (dist < 1.0) {\n            fragColor = vec4(0.0,0.0,0.0,1.0);\n        } else {\n            fragColor.xyz = mix(fragColor.xyz, hatchTintColor, hatchTintIntensity);\n        }\n    } else {\n        float hatchPhase = - coord.y / hatchSlope + coord.x;\n        float dist = abs(mod((hatchPhase), (hatchPeriod)));\n        if (dist < 1.0) {\n            fragColor = vec4(0.0,0.0,0.0,1.0);\n        } else {\n            fragColor.xyz = mix(fragColor.xyz, hatchTintColor, hatchTintIntensity);\n        }\n    }\n    return fragColor;\n}\n#endif\n"},"./src/wgs/render/chunks/hsv.glsl":
/*!****************************************!*\
  !*** ./src/wgs/render/chunks/hsv.glsl ***!
  \****************************************/
/*! no static exports found */function(e,n){e.exports="vec3 rgb2hsv(vec3 color)\n{\n    float delta;\n    float colorMax, colorMin;\n    float h,s,v;\n    vec3 hsv;\n    colorMax = max(color.r,color.g);\n    colorMax = max(colorMax,color.b);\n    colorMin = min(color.r,color.g);\n    colorMin = min(colorMin,color.b);\n    v = colorMax;\n    if(colorMax != 0.0)\n    {\n        s = (colorMax - colorMin)/colorMax;\n    }\n    else\n    {\n        s = 0.0;\n    }\n    if(s != 0.0)\n    {\n        delta = colorMax-colorMin;\n        if (color.r == colorMax)\n        {\n            h = (color.g-color.b)/delta;\n        }\n        else if (color.g == colorMax)\n        {\n            h = 2.0 + (color.b-color.r) / delta;\n        }\n        else\n        {\n            h = 4.0 + (color.r-color.g)/delta;\n        }\n        h /= 6.0;\n        if( h < 0.0)\n        {\n            h +=1.0;\n        }\n    }\n    else\n    {\n        h = 0.0;\n    }\n    hsv = vec3(h,s,v);\n    return hsv;\n}\nvec3 hsv2rgb(vec3 hsv)\n{\n    vec3 color;\n    float f,p,q,t;\n    float h,s,v;\n    float i,hi;\n    {\n        h = hsv.x*6.0;\n        s = hsv.y;\n        v = hsv.z;\n        i = floor(h);\n        f = h-i;\n        p = v * (1.0 - s);\n        q = v * (1.0 - (s * f));\n        t = v * (1.0 - (s * (1.0 - f)));\n        float r,g,b;\n        if (i == 0.0)\n        {\n            r = v;\n            g = t;\n            b = p;\n        }\n        else if (i == 1.0)\n        {\n            r = q;\n            g = v;\n            b = p;\n        }\n        else if (i == 2.0)\n        {\n            r = p;\n            g = v;\n            b = t;\n        }\n        else if (i == 3.0)\n        {\n            r = p;\n            g = q;\n            b = v;\n        }\n        else if (i == 4.0)\n        {\n            r = t;\n            g = p;\n            b = v;\n        }\n        else\n        {\n            r = v;\n            g = p;\n            b = q;\n        }\n        color = vec3(r,g,b);\n    }\n    return color;\n}"},"./src/wgs/render/chunks/id_decl_frag.glsl":
/*!*************************************************!*\
  !*** ./src/wgs/render/chunks/id_decl_frag.glsl ***!
  \*************************************************/
/*! no static exports found */function(e,n){e.exports="#if defined(MRT_NORMALS) || defined(MRT_ID_BUFFER)\n    varying highp float depth;\n#endif\n#if defined(MRT_ID_BUFFER) || defined(ID_COLOR)\n    #ifdef USE_VERTEX_ID\n        varying vec3 vId;\n    #elif defined(LINE_2D_SHADER)\n        varying vec4 dbId;\n    #else\n        uniform vec3 dbId;\n    #endif\n#endif\n#if defined(MRT_ID_BUFFER) || defined(MODEL_COLOR)\n    uniform vec3 modelId;\n#endif\n#ifdef _LMVWEBGL2_\n    #if defined(MRT_NORMALS)\n        layout(location = 1) out vec4 outNormal;\n        #if defined(MRT_ID_BUFFER)\n            layout(location = 2) out vec4 outId;\n            #if defined(MODEL_COLOR)\n                layout(location = 3) out vec4 outModelId;\n            #endif\n        #endif\n    #elif defined(MRT_ID_BUFFER)\n        layout(location = 1) out vec4 outId;\n        #if defined(MODEL_COLOR)\n            layout(location = 2) out vec4 outModelId;\n        #endif\n    #endif\n#else\n    #define gl_FragColor gl_FragData[0]\n    #if defined(MRT_NORMALS)\n        #define outNormal gl_FragData[1]\n        #if defined(MRT_ID_BUFFER)\n            #define outId gl_FragData[2]\n            #if defined(MODEL_COLOR)\n                #define outModelId gl_FragData[3]\n            #endif\n        #endif\n    #elif defined(MRT_ID_BUFFER)\n        #define outId gl_FragData[1]\n        #if defined(MODEL_COLOR)\n            #define outModelId gl_FragData[2]\n        #endif\n    #endif\n#endif"},"./src/wgs/render/chunks/id_decl_vert.glsl":
/*!*************************************************!*\
  !*** ./src/wgs/render/chunks/id_decl_vert.glsl ***!
  \*************************************************/
/*! no static exports found */function(e,n){e.exports="#ifdef USE_VERTEX_ID\nattribute vec3 id;\nvarying   vec3 vId;\n#endif\n"},"./src/wgs/render/chunks/id_frag.glsl":
/*!********************************************!*\
  !*** ./src/wgs/render/chunks/id_frag.glsl ***!
  \********************************************/
/*! no static exports found */function(e,n){e.exports="\n#if defined(USE_VERTEX_ID) && (defined(MRT_ID_BUFFER) || defined(ID_COLOR))\n    vec3 dbId = vId;\n#endif\n#ifdef MRT_ID_BUFFER\n    #ifndef ENABLE_ID_DISCARD\n        const float writeId = 1.0;\n    #endif\n    outId = vec4(dbId.rgb, writeId);\n    #ifdef MODEL_COLOR\n        outModelId = vec4(modelId.rgb, writeId);\n    #endif\n#elif defined(ID_COLOR)\n    #ifdef ENABLE_ID_DISCARD\n        if (writeId==0.0) {\n            discard;\n        }\n    #endif\n    gl_FragColor = vec4(dbId.rgb, 1.0);\n#elif defined(MODEL_COLOR)\n    #ifdef ENABLE_ID_DISCARD\n        if (writeId==0.0) {\n            discard;\n        }\n    #endif\n    gl_FragColor = vec4(modelId.rgb, 1.0);\n#endif\n"},"./src/wgs/render/chunks/id_vert.glsl":
/*!********************************************!*\
  !*** ./src/wgs/render/chunks/id_vert.glsl ***!
  \********************************************/
/*! no static exports found */function(e,n){e.exports="\n#ifdef USE_VERTEX_ID\nvId = id;\n#endif\n"},"./src/wgs/render/chunks/instancing_decl_vert.glsl":
/*!*********************************************************!*\
  !*** ./src/wgs/render/chunks/instancing_decl_vert.glsl ***!
  \*********************************************************/
/*! no static exports found */function(e,n){e.exports="\n#ifdef USE_INSTANCING\nattribute vec3 instOffset;\nattribute vec4 instRotation;\nattribute vec3 instScaling;\nvec3 applyQuaternion(vec3 p, vec4 q) {\n    return p + 2.0 * cross(q.xyz, cross(q.xyz, p) + q.w * p);\n}\nvec3 getInstancePos(vec3 pos) {\n    return instOffset + applyQuaternion(instScaling * pos, instRotation);\n}\nvec3 getInstanceNormal(vec3 normal) {\n    return applyQuaternion(normal/instScaling, instRotation);\n}\n#else\nvec3 getInstancePos(vec3 pos)       { return pos;    }\nvec3 getInstanceNormal(vec3 normal) { return normal; }\n#endif\n"},"./src/wgs/render/chunks/line_decl_common.glsl":
/*!*****************************************************!*\
  !*** ./src/wgs/render/chunks/line_decl_common.glsl ***!
  \*****************************************************/
/*! no static exports found */function(e,n){e.exports="\n#define LINE_2D_SHADER 1\n#define TAU     6.28318530718\n#define PI      3.14159265358979\n#define HALF_PI 1.57079632679\n#define PI_0_5  HALF_PI\n#define PI_1_5  4.71238898038\n#define ENABLE_ID_DISCARD\n#define VBB_GT_TRIANGLE_INDEXED  0.0\n#define VBB_GT_LINE_SEGMENT      1.0\n#define VBB_GT_ARC_CIRCULAR      2.0\n#define VBB_GT_ARC_ELLIPTICAL    3.0\n#define VBB_GT_TEX_QUAD          4.0\n#define VBB_GT_ONE_TRIANGLE      5.0\n#define VBB_GT_MSDF_TRIANGLE_INDEXED 6.0\n#define VBB_INSTANCED_FLAG   0.0\n#define VBB_SEG_START_RIGHT  0.0\n#define VBB_SEG_START_LEFT   1.0\n#define VBB_SEG_END_RIGHT    2.0\n#define VBB_SEG_END_LEFT     3.0\n#define LTSCALE 0.25\nvarying vec4 fsColor;\nvarying vec2 fsOffsetDirection;\nvarying vec4 fsMultipurpose;\nvarying float fsHalfWidth;\nvarying vec2 fsVpTC;\nvarying float fsGhosting;\n"},"./src/wgs/render/chunks/normal_map.glsl":
/*!***********************************************!*\
  !*** ./src/wgs/render/chunks/normal_map.glsl ***!
  \***********************************************/
/*! no static exports found */function(e,n){e.exports="#if defined(USE_SURFACE_NORMAL_MAP) || defined( USE_LAYERED_NORMAL_MAP ) || defined( USE_TILING_NORMAL )\nvoid heightMapTransform(\n    sampler2D bumpTexture,\n    vec2 uv,\n    mat3 transform,\n    vec2 bumpScale,\n    inout vec3 T,\n    inout vec3 B,\n    inout vec3 N\n) {\n    vec2 st = (transform * vec3(uv, 1.0)).xy;\n    mat3 mtxTangent = mat3(T, B, N);\n    T = normalize(mtxTangent * (transform * vec3(1.0, 0.0, 0.0)));\n    B = normalize(mtxTangent * (transform * vec3(0.0, 1.0, 0.0)));\n    const float oneThird = 1.0 / 3.0;\n    vec3 avg = vec3(oneThird, oneThird, oneThird);\n    vec2 offset = fwidth(st);\n    float h0 = dot(texture2D(bumpTexture, st).xyz, avg);\n    float hx = dot(texture2D(bumpTexture, st + vec2(offset.x, 0.0)).xyz, avg);\n    float hy = dot(texture2D(bumpTexture, st + vec2(0.0, offset.y)).xyz, avg);\n    vec2 diff = vec2(h0 - hx, h0 - hy) / offset;\n    N = normalize(\n        N + (\n            diff.x * T * bumpScale.x +\n            diff.y * B * bumpScale.y\n        )\n    );\n}\nvoid normalMapTransform(\n    sampler2D bumpTexture,\n    vec2 uv,\n    mat3 transform,\n    vec2 bumpScale,\n    inout vec3 T,\n    inout vec3 B,\n    inout vec3 N\n) {\n    vec2 st = (transform * vec3(uv, 1.0)).xy;\n    vec3 mapN =  2.0 * texture2D(bumpTexture, st).xyz - 1.0;\n    mapN.xy *= bumpScale.x;\n    mapN.z *= bumpScale.y;\n    vec3 v = vec3(mapN.y, -mapN.x, 0.0);\n    float c = -mapN.z;\n    mat3 skewV = mat3(\n        0.0, v.z, -v.y,\n        -v.z, 0.0, v.x,\n        v.y, -v.x, 0.0\n    );\n    mat3 rot = mat3(1.0) + skewV + skewV*skewV * 1.0/(1.0-c);\n    N *= rot;\n    T *= rot;\n    B *= rot;\n}\n#endif\n"},"./src/wgs/render/chunks/ordered_dither.glsl":
/*!***************************************************!*\
  !*** ./src/wgs/render/chunks/ordered_dither.glsl ***!
  \***************************************************/
/*! no static exports found */function(e,n){e.exports="vec3 orderedDithering(vec3 col) {\n    const vec4 m0 = vec4( 1.0, 13.0,  4.0, 16.0);\n    const vec4 m1 = vec4( 9.0,  5.0, 12.0,  8.0);\n    const vec4 m2 = vec4( 3.0, 15.0,  2.0, 14.0);\n    const vec4 m3 = vec4(11.0,  7.0, 10.0,  6.0);\n    int i = int(mod(float(gl_FragCoord.x), 4.0));\n    int j = int(mod(float(gl_FragCoord.y), 4.0));\n    vec4 biasRow;\n    if      (i==0) biasRow = m0;\n    else if (i==1) biasRow = m1;\n    else if (i==2) biasRow = m2;\n    else           biasRow = m3;\n    float bias;\n    if      (j==0) bias = biasRow.x;\n    else if (j==1) bias = biasRow.y;\n    else if (j==2) bias = biasRow.z;\n    else           bias = biasRow.w;\n    return col + bias / 17.0 / 256.0;\n}\n"},"./src/wgs/render/chunks/pack_depth.glsl":
/*!***********************************************!*\
  !*** ./src/wgs/render/chunks/pack_depth.glsl ***!
  \***********************************************/
/*! no static exports found */function(e,n){e.exports="\nvec4 packDepth( const in float depth ) {\n    vec4 enc = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n    enc = fract(enc);\n    enc -= enc.yzww * vec4(1.0/255.0,1.0/255.0,1.0/255.0,0.0);\n    return enc;\n}\nfloat unpackDepth( const in vec4 rgba_depth ) {\n    return dot( rgba_depth, vec4(1.0, 1.0/255.0, 1.0/65025.0, 1.0/160581375.0) );\n}\n"},"./src/wgs/render/chunks/pack_normals.glsl":
/*!*************************************************!*\
  !*** ./src/wgs/render/chunks/pack_normals.glsl ***!
  \*************************************************/
/*! no static exports found */function(e,n){e.exports="\n#define kPI 3.14159265358979\nvec2 encodeNormal (vec3 n) {\n    return (vec2(atan(n.y,n.x)/kPI, n.z)+1.0)*0.5;\n}\nvec3 decodeNormal (vec2 enc) {\n    vec2 ang = enc * 2.0 - 1.0;\n    vec2 scth = vec2(sin(ang.x * kPI), cos(ang.x * kPI));\n    vec2 scphi = vec2(sqrt(1.0 - ang.y * ang.y), ang.y);\n    return vec3(scth.y * scphi.x, scth.x * scphi.x, scphi.y);\n}\n"},"./src/wgs/render/chunks/point_size.glsl":
/*!***********************************************!*\
  !*** ./src/wgs/render/chunks/point_size.glsl ***!
  \***********************************************/
/*! no static exports found */function(e,n){e.exports="gl_PointSize = point_size;"},"./src/wgs/render/chunks/prism_glazing.glsl":
/*!**************************************************!*\
  !*** ./src/wgs/render/chunks/prism_glazing.glsl ***!
  \**************************************************/
/*! no static exports found */function(e,n){e.exports="\nvec3 TransmitAdjust(vec3 transmission, vec3 f0) \n{ \n   vec3 limit = max(1.0 - f0, 0.00001); \n   return clamp(transmission, vec3(0.0, 0.0, 0.0), limit) / limit; \n} \nfloat ColorToIlluminance(in vec3 color) \n{ \n   const vec3 rgb2grey = vec3(0.299, 0.587, 0.114); \n   float illuminance = dot(rgb2grey, color); \n   return illuminance; \n} \nvoid applyPrismGlazingOpacity(\n    inout vec4 color,\n    vec3 transmissionF,\n    float transmissionAlpha,\n    float NdotV,\n    float glazingIlluminace) \n{\n    const float third = 1.0/3.0; \n    float transSurface = exp(-(transmissionAlpha + (transmissionAlpha < 0.0025 ? 0.0 : 0.25)) * NdotV * PI); \n    float opacity = 1.0- dot((1.0 - transmissionF), vec3(third,third,third)) * transSurface * glazingIlluminace; \n    opacity = clamp(opacity, 0.01, 0.99);\n    color.a *= opacity;\n} \n"},"./src/wgs/render/chunks/prism_transparency.glsl":
/*!*******************************************************!*\
  !*** ./src/wgs/render/chunks/prism_transparency.glsl ***!
  \*******************************************************/
/*! no static exports found */function(e,n){e.exports="void applyPrismTransparency(\n    inout vec4 color,\n    vec3 transparentColor,\n    float transparentIor\n) {\n    float fsLevel = max(max(color.r, color.g), color.b);\n    color = vec4(color.rgb/fsLevel, fsLevel);\n    float transLevel = min(min(transparentColor.r, transparentColor.g), transparentColor.b);\n    transLevel = min( (1.0 - surface_roughness), transLevel );\n    float transAlpha = (1.0 - transLevel) * 0.4 + surface_roughness * 0.55;\n    vec3 tr_g_color = sqrt(transparentColor);\n    vec4 transColor = vec4(0.5 * vec3(tr_g_color), transAlpha);\n    float strength = 1.0 - (1.0 - fsLevel) * (1.0 - fsLevel);\n    color = mix(transColor, color, strength);\n    color.a = max(color.a, 0.05);\n    if (transparentIor == 1.0 && tr_g_color == vec3(1.0)) {\n        color.a = 0.0;\n    }\n}"},"./src/wgs/render/chunks/prism_wood.glsl":
/*!***********************************************!*\
  !*** ./src/wgs/render/chunks/prism_wood.glsl ***!
  \***********************************************/
/*! no static exports found */function(e,n){e.exports="#if defined( PRISMWOOD )\n#define ONE 0.00390625\nfloat GetIndexedValue(vec4 array, int index)\n{\n    if (index == 0)\n        return array[0];\n    else if (index == 1)\n        return array[1];\n    else if (index == 2)\n        return array[2];\n    else if (index == 3)\n        return array[3];\n    else\n        return 0.0;\n}\nint GetIndexedValue(ivec2 array, int index)\n{\n    if (index == 0)\n        return array[0];\n    else if (index == 1)\n        return array[1];\n    else\n        return 0;\n}\n#if defined( USE_WOOD_CURLY_DISTORTION_MAP )\nfloat SampleCurlyPattern(vec2 uv)\n{\n    vec2 uv_wood_curly_distortion_map = (wood_curly_distortion_map_texMatrix * vec3(uv, 1.0)).xy;\n    WOOD_CURLY_DISTORTION_CLAMP_TEST;\n    vec3 curlyDistortion = texture2D(wood_curly_distortion_map, uv_wood_curly_distortion_map).xyz;\n    if(wood_curly_distortion_map_invert) curlyDistortion = vec3(1.0) - curlyDistortion;\n    return curlyDistortion.r;\n}\nvec3 DistortCurly(vec3 p)\n{\n    if (!wood_curly_distortion_enable) return p;\n    float r = length(p.xy);\n    if (r < 0.00001) return p;\n    const float INV_ANGLE_INTERVAL = 1.27323954;\n    const float NUM_INTERVAL = 8.0;\n    float theta = atan(p.y, p.x);\n    if (theta < 0.0)\n        theta += PI2;\n    float intIdx = theta * INV_ANGLE_INTERVAL;\n    int idx0 = int(mod(floor(intIdx), NUM_INTERVAL));\n    int idx1 = int(mod(ceil(intIdx), NUM_INTERVAL));\n    const vec4 HASH_TABLE1 = vec4(0.450572,0.114598, 0.886043, 0.315119);\n    const vec4 HASH_TABLE2 = vec4(0.216133,0.306264, 0.685616, 0.317907);\n    float offset0 = idx0 < 4 ? GetIndexedValue(HASH_TABLE1, idx0) : GetIndexedValue(HASH_TABLE2, idx0-4);\n    float offset1 = idx1 < 4 ? GetIndexedValue(HASH_TABLE1, idx1) : GetIndexedValue(HASH_TABLE2, idx1-4);\n    const float maxOffset = 100.0;\n    offset0 = (offset0 - 0.5) * maxOffset;\n    offset1 = (offset1 - 0.5) * maxOffset;\n    vec2 uv0 = vec2(p.z + offset0, r);\n    float shiftWeight0 =  SampleCurlyPattern(uv0);\n    vec2 uv1 = vec2(p.z + offset1, r);\n    float shiftWeight1 =  SampleCurlyPattern(uv1);\n    float interpWeight = fract(intIdx);\n    float shiftWeight = mix(shiftWeight0, shiftWeight1, interpWeight);\n    const float INV_MIN_RADIUS = 2.0;\n    float shiftWeightAdjust = smoothstep(0.0, 1.0, r * INV_MIN_RADIUS);\n    r -= wood_curly_distortion_scale * (shiftWeight * shiftWeightAdjust);\n    float thetaNew = atan(p.y, p.x);\n    vec3 pNew = p;\n    pNew.x = r * cos(thetaNew);\n    pNew.y = r * sin(thetaNew);\n    return pNew;\n}\n#endif\nvec3 un2sn(vec3 range)\n{\n    return range * 2.0 - 1.0;\n}\nfloat inoise(vec3 p)\n{\n    vec3 modp = mod(floor(p), 256.0);\n    modp.xy = modp.xy * ONE;\n    vec4 AA = texture2D(perm2DMap, vec2(modp.x, modp.y), 0.0) * 255.0;\n    AA = AA + modp.z;\n    AA = mod(floor(AA), 256.0);\n    AA *= ONE;\n    vec3 gradx1 = un2sn(texture2D(permGradMap,vec2(AA.x,0.0),0.0).xyz);\n    vec3 grady1 = un2sn(texture2D(permGradMap,vec2(AA.y,0.0),0.0).xyz);\n    vec3 gradz1 = un2sn(texture2D(permGradMap,vec2(AA.z,0.0),0.0).xyz);\n    vec3 gradw1 = un2sn(texture2D(permGradMap,vec2(AA.w,0.0),0.0).xyz);\n    vec3 gradx2 = un2sn(texture2D(permGradMap,vec2(AA.x + ONE,0.0),0.0).xyz);\n    vec3 grady2 = un2sn(texture2D(permGradMap,vec2(AA.y + ONE,0.0),0.0).xyz);\n    vec3 gradz2 = un2sn(texture2D(permGradMap,vec2(AA.z + ONE,0.0),0.0).xyz);\n    vec3 gradw2 = un2sn(texture2D(permGradMap,vec2(AA.w + ONE,0.0),0.0).xyz);\n    p -= floor(p);\n    vec3 fadep = p * p * p * (p * (p * 6.0 - 15.0) + 10.0);\n    return mix( mix( mix( dot(gradx1, p ),\n                          dot(gradz1, p + vec3(-1.0, 0.0, 0.0)), fadep.x),\n                     mix( dot(grady1, p + vec3(0.0, -1.0, 0.0)),\n                          dot(gradw1, p + vec3(-1.0, -1.0, 0.0)), fadep.x), fadep.y),\n                mix( mix( dot(gradx2, p + vec3(0.0, 0.0, -1.0)),\n                          dot(gradz2, p + vec3(-1.0, 0.0, -1.0)), fadep.x),\n                     mix( dot(grady2, p + vec3(0.0, -1.0, -1.0)),\n                          dot(gradw2, p + vec3(-1.0, -1.0, -1.0)), fadep.x), fadep.y), fadep.z);\n}\nfloat inoise(float p)\n{\n    float modp = mod(floor(p), 256.0);\n    modp = (modp + 256.0) * ONE;\n    float permx = texture2D(permutationMap, vec2(modp, 0.0), 0.0).r;\n    float gradx = texture2D(gradientMap, vec2(permx, 0.0), 0.0).r*2.0-1.0;\n    float permy = texture2D(permutationMap, vec2(modp + ONE, 0.0), 0.0).r;\n    float grady = texture2D(gradientMap, vec2(permy, 0.0), 0.0).r*2.0-1.0;\n    p -= floor(p);\n    float fadep = p * p * p * (p * (p * 6.0 - 15.0) + 10.0);\n    return mix(gradx * p, grady * (p - 1.0), fadep);\n}\nfloat multiband_inoise(vec3 p, int bands, vec4 w, vec4 f)\n{\n    float noise = 0.0;\n    for(int i = 0; i < 4; ++i)\n    {\n        if (i >= bands) break;\n        noise += GetIndexedValue(w, i) * inoise(p * GetIndexedValue(f, i));\n    }\n    return noise;\n}\nfloat multiband_inoise(float p, int bands, vec4 w, vec4 f)\n{\n    float noise = 0.0;\n    for(int i = 0; i < 4; ++i)\n    {\n        if (i >= bands) break;\n        noise += GetIndexedValue(w, i) * inoise(p * GetIndexedValue(f, i));\n    }\n    return noise;\n}\nvec3 Distort3DCosineRadialDir(vec3 p)\n{\n    float radius = length(p.xy);\n    if (radius < 0.00001) return p;\n    vec2 theta = p.xy / radius;\n    float radiusShift = 0.0;\n    for (int i = 0; i < 4; ++i)\n    {\n        if (i >= wood_fiber_cosine_bands) break;\n        radiusShift += GetIndexedValue(wood_fiber_cosine_weights, i) * cos(p.z * RECIPROCAL_PI2 * GetIndexedValue(wood_fiber_cosine_frequencies, i));\n    }\n    const float MIN_RADIUS = 1.5;\n    float weight = clamp(radius / MIN_RADIUS, 0.0, 1.0);\n    if(weight >= 0.5)\n        weight = weight * weight * (3.0 - (weight + weight));\n    p.xy += theta * radiusShift * weight;\n    return p;\n}\nvec3 Distort3DPerlin(vec3 p)\n{\n    vec3 pAniso = vec3(p.xy, p.z * wood_fiber_perlin_scale_z);\n    p.xy += multiband_inoise(pAniso, wood_fiber_perlin_bands, wood_fiber_perlin_weights, wood_fiber_perlin_frequencies);\n    return p;\n}\nvec3 Distort(vec3 p)\n{\n    if(wood_fiber_cosine_enable)\n        p = Distort3DCosineRadialDir(p);\n    if(wood_fiber_perlin_enable)\n        p = Distort3DPerlin(p);\n    return p;\n}\nfloat DistortRadiusLength(float radiusLength)\n{\n    radiusLength += multiband_inoise(radiusLength, wood_growth_perlin_bands, wood_growth_perlin_weights, wood_growth_perlin_frequencies);\n    if (radiusLength < 0.0) radiusLength = 0.0;\n    return radiusLength;\n}\nfloat ComputeEarlyWoodRatio(float radiusLength)\n{\n    float fraction = mod(radiusLength, wood_ring_thickness) / wood_ring_thickness;\n    if (fraction <= wood_ring_fraction.y)\n       return 1.0;\n    else if(fraction <= wood_ring_fraction.x)\n       return (1.0 - (fraction - wood_ring_fraction.y) / wood_fall_rise.x);\n    else if(fraction <= wood_ring_fraction.w)\n       return 0.0;\n    else\n       return ((fraction - wood_ring_fraction.w) / wood_fall_rise.y);\n}\nvec3 DistortEarlyColor(vec3 earlyColor, float radiusLength)\n{\n    float expValue = 1.0 + multiband_inoise(radiusLength,wood_earlycolor_perlin_bands,wood_earlycolor_perlin_weights,wood_earlycolor_perlin_frequencies);\n    earlyColor = pow(abs(earlyColor), vec3(expValue));\n    return earlyColor;\n}\nvec3 DistortLateColor(vec3 lateColor, float radiusLength)\n{\n    float expValue = 1.0 + multiband_inoise(radiusLength,wood_latecolor_perlin_bands,wood_latecolor_perlin_weights,wood_latecolor_perlin_frequencies);\n    lateColor = pow(abs(lateColor), vec3(expValue));\n    return lateColor;\n}\nvec3 DistortDiffuseColor(vec3 diffAlbedo, vec3 p)\n{\n    p.z *= wood_diffuse_perlin_scale_z;\n    float expValue = 1.0 + multiband_inoise(p, wood_diffuse_perlin_bands, wood_diffuse_perlin_weights, wood_diffuse_perlin_frequencies);\n    diffAlbedo = pow(abs(diffAlbedo), vec3(expValue));\n    return diffAlbedo;\n}\nfloat LayerRoughnessVar(float roughness, float earlyWoodRatio)\n{\n    return earlyWoodRatio * wood_groove_roughness + (1.0 - earlyWoodRatio) * roughness;\n}\nfloat hashword(vec2 k)\n{\n    k = mod(k, vec2(256.0)) * ONE;\n    float a = texture2D(permutationMap, vec2(k.x, 0.0)).x + k.y ;\n    a = texture2D(permutationMap, vec2(a, 0.0)).x ;\n    return a*255.0;\n}\nfloat wyvillsq(float rsq)\n{\n    if (rsq >= 1.0) return 0.0;\n    float tmp = 1.0 - rsq;\n    return tmp*tmp*tmp;\n}\nfloat Weight2DNeighborImpulses(vec3 p, float woodWeight)\n{\n    if(woodWeight <= 0.0) return 0.0;\n    float poreRadius = wood_pore_radius * woodWeight;\n    vec2 left = floor((p.xy - poreRadius) / wood_pore_cell_dim);\n    vec2 right = floor((p.xy + poreRadius) / wood_pore_cell_dim);\n    float weight = 0.0;\n    float invRsq = 1.0 / (poreRadius * poreRadius);\n    const float norm =  1.0 / 15.0;\n    for (int j = 0; j <= 4; j++)\n    {\n        if (j > int(right.y - left.y)) continue;\n        for (int i = 0; i <= 4; i++)\n        {\n            if (i > int(right.x - left.x)) continue;\n            vec2 pij = vec2(float(i) + left.x,float(j) + left.y);\n            float hRNum = hashword(pij);\n            float impPosX = mod(hRNum, 16.0) * norm;\n            float impPosY = floor(hRNum / 16.0) * norm;\n            impPosX = (pij.x + impPosX)* wood_pore_cell_dim;\n            impPosY = (pij.y + impPosY)* wood_pore_cell_dim;\n            float dsq = (p.x - impPosX) * (p.x - impPosX) + (p.y - impPosY) * (p.y - impPosY);\n            weight += wyvillsq(dsq * invRsq);\n        }\n    }\n    return weight;\n}\nfloat Weight3DRayImpulses(vec3 p)\n{\n    int segIdx = int(floor(p.z / wood_ray_seg_length_z));\n    float factor = p.z / wood_ray_seg_length_z - float(segIdx);\n    int segIdx1 = segIdx - 1;\n    if ( factor > 0.5 )\n        segIdx1 = segIdx + 1;\n    float theta = atan(p.y, p.x);\n    float sliceIdx = floor(((theta + PI) * RECIPROCAL_PI2) * wood_ray_num_slices);\n    if ( sliceIdx == wood_ray_num_slices)\n        sliceIdx-=1.0;\n    ivec2 arrSegs = ivec2(segIdx, segIdx1);\n    float weight = 0.0;\n    const float norm =  1.0 / 15.0;\n    float radialOffset = 5.0;\n    float radialLength = length(p.xy);\n    for (int seg = 0; seg < 2; seg++)\n    {\n        float hRNum = hashword(vec2(sliceIdx, GetIndexedValue(arrSegs, seg)));\n        float rn1 = mod(hRNum,16.0) * norm;\n        if (radialLength < radialOffset * rn1)\n            continue;\n        float rayTheta = rn1;\n        rayTheta = ( ( sliceIdx + rayTheta ) / wood_ray_num_slices ) * ( 2.0 * PI ) - PI;\n        float rayPosZ = (hRNum/16.0)* norm;\n        rayPosZ = ( float(GetIndexedValue(arrSegs, seg)) + rayPosZ ) * wood_ray_seg_length_z;\n        vec3 pt1 = vec3(0.0);\n        vec3 pt2 = vec3(cos(rayTheta), sin(rayTheta), 0.0);\n        vec3 p1 = p;\n        p1.z -= rayPosZ;\n        p1.z /=  wood_ray_ellipse_z2x;\n        vec3 v1 = pt2 - pt1;\n        vec3 v2 = pt1 - p1;\n        v2 = cross(v1, v2);\n        float dist = length(v2) / length(v1);\n        float invRsq = 1.0 / ( wood_ray_ellipse_radius_x * wood_ray_ellipse_radius_x);\n        weight += wyvillsq( (dist * dist) * invRsq );\n    }\n    return weight;\n}\nvec3 DarkenColorWithPores(vec3 p, vec3 diffColor, float woodWeight)\n{\n    float poresWeight = Weight2DNeighborImpulses(p, woodWeight);\n    float a = wood_pore_color_power - 1.0;\n    float b = 1.0;\n    float y = a * poresWeight + b;\n    return pow(abs(diffColor), vec3(y));\n}\nvec3 DarkenColorWithRays(vec3 p, vec3 diffColor)\n{\n    float raysWeight = Weight3DRayImpulses(p);\n    float a = wood_ray_color_power - 1.0;\n    float b = 1.0;\n    float y = a * raysWeight + b;\n    return pow(abs(diffColor), vec3(y));\n}\nfloat ComputeWoodWeight(float earlyWoodRatio)\n{\n    float woodWeight = 0.0;\n    if (wood_pore_type == 0)\n        woodWeight = 1.0;\n    else if (wood_pore_type == 1)\n        woodWeight = earlyWoodRatio;\n    else if (wood_pore_type == 2)\n        woodWeight = 1.0 - earlyWoodRatio;\n    else\n        woodWeight = -1.0;\n    return woodWeight;\n}\n#if defined( PRISMWOODBUMP )\nfloat ComputeEarlyWoodRatioAA(float radiusLength, float invUnitExt)\n{\n    float transPixels = min(wood_fall_rise.x, wood_fall_rise.y) * wood_ring_thickness * invUnitExt;\n    float samplesf = clamp(4.0 / transPixels, 1.0, 4.0);\n    int samples = int(samplesf);\n    float inverseSamples = 1.0 / float(samples);\n    vec2 rdelta = vec2(dFdx(radiusLength), dFdy(radiusLength)) * inverseSamples;\n    float earlywoodRatio = 0.0;\n    for (int i = 0; i < 4; ++i)\n    {\n        if (i >= samples) break;\n        for (int j = 0; j < 4; ++j)\n        {\n            if (j >= samples) break;\n            float r = radiusLength + dot(vec2(i, j), rdelta);\n            earlywoodRatio += ComputeEarlyWoodRatio(r);\n        }\n    }\n    return earlywoodRatio * (inverseSamples * inverseSamples);\n}\nfloat LatewoodDepthVariation(float invUnitExt)\n{\n    float transPixels = min(wood_fall_rise.x, wood_fall_rise.y) * wood_ring_thickness * invUnitExt;\n    return clamp(transPixels * 0.5, 0.0, 1.0);\n}\nfloat LatewoodHeightVariation(float earlyWoodRatio, float latewoodBumpDepth,\n                              float depthVar)\n{\n    return ( 1.0 - earlyWoodRatio ) * latewoodBumpDepth * depthVar;\n}\nfloat PoreDepthVariation(float woodWeight, float invUnitExt)\n{\n    float porePixels = woodWeight * wood_pore_radius * invUnitExt;\n    return clamp(porePixels, 0.0, 1.0);\n}\nfloat PoreHeightVariation(float earlyWoodRatio, float poresWeight, float poreDepth,\n                          float depthVar)\n{\n    return poresWeight * (-1.0 * poreDepth) * depthVar;\n}\nvoid ComputeTangents(vec3 normal, out vec3 u, out vec3 v)\n{\n    float scale = normal.z < 0.0 ? -1.0 : 1.0;\n    vec3 temp = scale * normal;\n    float e    = temp.z;\n    float h    = 1.0/(1.0 + e);\n    float hvx  = h   *  temp.y;\n    float hvxy = hvx * -temp.x;\n    u = vec3(e + hvx * temp.y, hvxy,                -temp.x);\n    v = vec3(hvxy,             e + h * temp.x * temp.x, -temp.y);\n    u *= scale;\n    v *= scale;\n}\nvec3 WoodBumpHeight(float heightLeft, float heightRight, float heightBack, float heightFront)\n{\n    const float epsilon = 0.001;\n    float heightDeltaX = heightRight - heightLeft;\n    vec3 Tu = vec3(2.0 * epsilon, 0.0, heightDeltaX);\n    float heightDeltaY = heightFront - heightBack;\n    vec3 Tv = vec3(0.0, 2.0 * epsilon, heightDeltaY);\n    return cross(Tu, Tv);\n}\nvec3 SelectNormal(vec3 N, vec3 bumpN, vec3 V)\n{\n    float bumpNdotV = dot(bumpN, V);\n    if(bumpNdotV > 0.0)\n        return bumpN;\n    else return N;\n}\nfloat MinInverseUnitExtent(vec3 p)\n{\n    return 1.0 / max(max(length(dFdx(p.xy)), length(dFdy(p.xy))), 0.000001);\n}\nfloat HeightVariation(vec3 pos)\n{\n    vec3 p = Distort(pos);\n    float radiusLength = length(p.xy);\n    if (wood_growth_perlin_enable)\n        radiusLength = DistortRadiusLength(radiusLength);\n    float invUnitExt = MinInverseUnitExtent(p);\n    float earlyWoodRatio = ComputeEarlyWoodRatioAA(radiusLength, invUnitExt);\n    float woodWeight = ComputeWoodWeight(earlyWoodRatio);\n    float poresWeight = Weight2DNeighborImpulses(p, woodWeight);\n    float depthVar = PoreDepthVariation(woodWeight, invUnitExt);\n    float poreHeightVariation = -1.0 * poresWeight * wood_pore_depth * depthVar;\n    float latewoodHeightVariation = 0.0;\n    if (wood_use_latewood_bump)\n    {\n        float latewoodDepthVar = LatewoodDepthVariation(invUnitExt);\n        latewoodHeightVariation = (1.0 - earlyWoodRatio) * wood_latewood_bump_depth * latewoodDepthVar;\n    }\n    float sumHeightVariation = poreHeightVariation + latewoodHeightVariation;\n    return sumHeightVariation;\n}\n#endif\nvec3 NoiseWood(vec3 p, inout float roughness)\n{\n    p = Distort(p);\n    float radiusLength = length(p.xy);\n    if(wood_growth_perlin_enable)\n        radiusLength = DistortRadiusLength(radiusLength);\n#if defined( PRISMWOODBUMP )\n    float invUnitExt = MinInverseUnitExtent( p );\n    float earlyWoodRatio = ComputeEarlyWoodRatioAA(radiusLength, invUnitExt);\n#else\n    float earlyWoodRatio = ComputeEarlyWoodRatio(radiusLength);\n#endif\n    vec3 earlyColor = wood_early_color;\n    if (wood_earlycolor_perlin_enable)\n        earlyColor = DistortEarlyColor(earlyColor, radiusLength);\n    vec3 lateColor;\n    if (wood_use_manual_late_color)\n        lateColor = wood_manual_late_color;\n    else\n        lateColor = pow(abs(earlyColor), vec3(wood_late_color_power));\n    if(wood_latecolor_perlin_enable)\n        lateColor = DistortLateColor(lateColor, radiusLength);\n    vec3 diffAlbedo = earlyWoodRatio * earlyColor + (1.0 - earlyWoodRatio) * lateColor;\n    if(wood_diffuse_perlin_enable)\n        diffAlbedo = DistortDiffuseColor(diffAlbedo, p);\n    if (wood_use_pores)\n    {\n        float woodWeight = ComputeWoodWeight(earlyWoodRatio);\n        diffAlbedo = DarkenColorWithPores(p, diffAlbedo, woodWeight);\n    }\n    if (wood_use_rays)\n        diffAlbedo = DarkenColorWithRays(p, diffAlbedo);\n    if(wood_use_groove_roughness)\n        roughness = LayerRoughnessVar(roughness, earlyWoodRatio);\n    return clamp(diffAlbedo, vec3(0.0), vec3(1.0));\n}\n#if defined(PRISMWOODBUMP)\nvoid getFinalWoodContext(\n    inout vec3 N, vec3 V, inout vec3 Tu, inout vec3 Tv, vec3 p,\n    vec3 geoNormal, vec3 tNormal, mat3 normalMatrix\n) {\n    vec3 offsetTuLeft = p - 0.001 * Tu;\n    vec3 offsetTuRight = p + 0.001 * Tu;\n    vec3 offsetTvLeft = p - 0.001 * Tv;\n    vec3 offsetTvRight = p + 0.001 * Tv;\n    float heightVariationTuLeft = HeightVariation(offsetTuLeft);\n    float heightVariationTuRight = HeightVariation(offsetTuRight);\n    float heightVariationTvLeft = HeightVariation(offsetTvLeft);\n    float heightVariationTvRight = HeightVariation(offsetTvRight);\n    vec3 bumpHeight = WoodBumpHeight(heightVariationTuLeft, heightVariationTuRight, heightVariationTvLeft, heightVariationTvRight);\n    vec3 newNormal = normalize(bumpHeight.x * Tu + bumpHeight.y * Tv + bumpHeight.z * vtNormal);\n    vec3 newNormalView = normalize(vNormalMatrix * newNormal);\n    vec3 selectedNormal = SelectNormal(geoNormal, newNormalView, V);\n    ComputeTangents(selectedNormal, Tu, Tv);\n    Tu = normalize(Tu);\n    Tv = normalize(Tv);\n    N = faceforward(selectedNormal, -V, selectedNormal);\n}\n#endif\n#endif\n"},"./src/wgs/render/chunks/shadowmap_decl_common.glsl":
/*!**********************************************************!*\
  !*** ./src/wgs/render/chunks/shadowmap_decl_common.glsl ***!
  \**********************************************************/
/*! no static exports found */function(e,n){e.exports="\nuniform float shadowESMConstant;\nuniform float shadowMapRangeMin;\nuniform float shadowMapRangeSize;\n"},"./src/wgs/render/chunks/shadowmap_decl_frag.glsl":
/*!********************************************************!*\
  !*** ./src/wgs/render/chunks/shadowmap_decl_frag.glsl ***!
  \********************************************************/
/*! no static exports found */function(e,n){e.exports="\n#ifdef USE_SHADOWMAP\nuniform sampler2D shadowMap;\nuniform vec2      shadowMapSize;\nuniform float     shadowDarkness;\nuniform float     shadowBias;\nuniform vec3      shadowLightDir;\nvarying vec4 vShadowCoord;\n#include<shadowmap_decl_common>\nfloat getShadowValue() {\n    float fDepth;\n    vec3 shadowColor = vec3( 1.0 );\n    vec3 shadowCoord = vShadowCoord.xyz / vShadowCoord.w;\n    shadowCoord.xyz = 0.5 * (shadowCoord.xyz + vec3(1.0, 1.0, 1.0));\n    bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n    bool inFrustum = all( inFrustumVec );\n    float shadowValue = 1.0;\n    if (inFrustum) {\n        shadowCoord.z = min(0.999, shadowCoord.z);\n        shadowCoord.z -= shadowBias;\n#ifdef USE_HARD_SHADOWS\n        vec4 rgbaDepth = texture2D( shadowMap, shadowCoord.xy );\n        float fDepth = rgbaDepth.r;\n        if ( fDepth < shadowCoord.z ) {\n            shadowValue = 1.0 - shadowDarkness;\n        }\n#else\n        vec4 rgbaDepth = texture2D( shadowMap, shadowCoord.xy );\n        float shadowMapValue = rgbaDepth.r;\n        shadowValue = exp(-shadowESMConstant * shadowCoord.z) * shadowMapValue;\n        shadowValue = min(shadowValue, 1.0);\n        shadowValue = mix(1.0 - shadowDarkness, 1.0, shadowValue);\n#endif\n    }\n    return shadowValue;\n}\n#else\nfloat getShadowValue() { return 1.0; }\n#endif\nvec3 applyEnvShadow(vec3 colorWithoutShadow, vec3 worldNormal) {\n#if defined(USE_SHADOWMAP)\n    float dp  = dot(shadowLightDir, worldNormal);\n    float dpValue = (dp + 1.0) / 2.0;\n    dpValue = min(1.0, dpValue * 1.5);\n    float sv = getShadowValue();\n    vec3 result = colorWithoutShadow * min(sv, dpValue);\n    return result;\n#else\n    return colorWithoutShadow;\n#endif\n}\n"},"./src/wgs/render/chunks/shadowmap_decl_vert.glsl":
/*!********************************************************!*\
  !*** ./src/wgs/render/chunks/shadowmap_decl_vert.glsl ***!
  \********************************************************/
/*! no static exports found */function(e,n){e.exports="\n#ifdef USE_SHADOWMAP\nvarying vec4 vShadowCoord;\nuniform mat4 shadowMatrix;\n#endif\n"},"./src/wgs/render/chunks/shadowmap_vert.glsl":
/*!***************************************************!*\
  !*** ./src/wgs/render/chunks/shadowmap_vert.glsl ***!
  \***************************************************/
/*! no static exports found */function(e,n){e.exports="\n#ifdef USE_SHADOWMAP\n{\n    vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n    vShadowCoord = shadowMatrix * worldPosition;\n}\n#endif\n"},"./src/wgs/render/chunks/theming_decl_frag.glsl":
/*!******************************************************!*\
  !*** ./src/wgs/render/chunks/theming_decl_frag.glsl ***!
  \******************************************************/
/*! no static exports found */function(e,n){e.exports="uniform vec4 themingColor;\n"},"./src/wgs/render/chunks/theming_frag.glsl":
/*!*************************************************!*\
  !*** ./src/wgs/render/chunks/theming_frag.glsl ***!
  \*************************************************/
/*! no static exports found */function(e,n){e.exports="gl_FragColor.rgb = mix(gl_FragColor.rgb, themingColor.rgb, themingColor.a);\n"},"./src/wgs/render/chunks/tonemap.glsl":
/*!********************************************!*\
  !*** ./src/wgs/render/chunks/tonemap.glsl ***!
  \********************************************/
/*! no static exports found */function(e,n){e.exports="\nfloat luminance_post(vec3 rgb) {\n    return dot(rgb, vec3(0.299, 0.587, 0.114));\n}\nfloat luminance_pre(vec3 rgb) {\n    return dot(rgb, vec3(0.212671, 0.715160, 0.072169));\n}\nvec3 xyz2rgb(vec3 xyz) {\n    vec3 R = vec3( 3.240479, -1.537150, -0.498535);\n    vec3 G = vec3(-0.969256,  1.875992,  0.041556);\n    vec3 B = vec3( 0.055648, -0.204043,  1.057311);\n    vec3 rgb;\n    rgb.b = dot(xyz, B);\n    rgb.g = dot(xyz, G);\n    rgb.r = dot(xyz, R);\n    return rgb;\n}\nvec3 rgb2xyz(vec3 rgb) {\n    vec3 X = vec3(0.412453, 0.35758, 0.180423);\n    vec3 Y = vec3(0.212671, 0.71516, 0.0721688);\n    vec3 Z = vec3(0.0193338, 0.119194, 0.950227);\n    vec3 xyz;\n    xyz.x = dot(rgb, X);\n    xyz.y = dot(rgb, Y);\n    xyz.z = dot(rgb, Z);\n    return xyz;\n}\nvec3 xyz2xyY(vec3 xyz) {\n    float sum = xyz.x + xyz.y + xyz.z;\n    sum = 1.0 / sum;\n    vec3 xyY;\n    xyY.z = xyz.y;\n    xyY.x = xyz.x * sum;\n    xyY.y = xyz.y * sum;\n    return xyY;\n}\nvec3 xyY2xyz(vec3 xyY) {\n    float x = xyY.x;\n    float y = xyY.y;\n    float Y = xyY.z;\n    vec3 xyz;\n    xyz.y = Y;\n    xyz.x = x * (Y / y);\n    xyz.z = (1.0 - x - y) * (Y / y);\n    return xyz;\n}\nfloat toneMapCanon_T(float x)\n{\n    float xpow = pow(x, 1.60525727);\n    float tmp = ((1.05542877*4.68037409)*xpow) / (4.68037409*xpow + 1.0);\n    return clamp(tmp, 0.0, 1.0);\n}\nconst float Shift = 1.0 / 0.18;\nfloat toneMapCanonFilmic_NoGamma(float x) {\n    x *= Shift;\n    const float A = 0.2;\n    const float B = 0.34;\n    const float C = 0.002;\n    const float D = 1.68;\n    const float E = 0.0005;\n    const float F = 0.252;\n    const float scale = 1.0/0.833837;\n    return (((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F) * scale;\n}\nvec3 toneMapCanonFilmic_WithGamma(vec3 x) {\n    x *= Shift;\n    const float A = 0.27;\n    const float B = 0.29;\n    const float C = 0.052;\n    const float D = 0.2;\n    const float F = 0.18;\n    const float scale = 1.0/0.897105;\n    return (((x*(A*x+C*B))/(x*(A*x+B)+D*F))) * scale;\n}\nvec3 toneMapCanonOGS_WithGamma_WithColorPerserving(vec3 x) {\n    vec3 outColor = x.rgb;\n    outColor = min(outColor, vec3(3.0));\n    float inLum = luminance_pre(outColor);\n    if (inLum > 0.0) {\n        float outLum = toneMapCanon_T(inLum);\n        outColor = outColor * (outLum / inLum);\n        outColor = clamp(outColor, vec3(0.0), vec3(1.0));\n    }\n    float gamma = 1.0/2.2;\n    outColor = pow(outColor, vec3(gamma));\n    return outColor;\n}\n"},"./src/wgs/render/chunks/wide_lines_decl.glsl":
/*!****************************************************!*\
  !*** ./src/wgs/render/chunks/wide_lines_decl.glsl ***!
  \****************************************************/
/*! no static exports found */function(e,n){e.exports="\n#ifdef WIDE_LINES\nattribute vec3 prev;\nattribute vec3 next;\nattribute float side;\nuniform vec2 view_size;\nvec2 to2d(vec4 i) {\n  return i.xy / i.w;\n}\n#endif\n"},"./src/wgs/render/chunks/wide_lines_vert.glsl":
/*!****************************************************!*\
  !*** ./src/wgs/render/chunks/wide_lines_vert.glsl ***!
  \****************************************************/
/*! no static exports found */function(e,n){e.exports="\n#ifdef WIDE_LINES\nvec4 mvpPosition = projectionMatrix * mvPosition; \nmat3 vectorMatrix = mat3(modelViewMatrix);\nvec2 _pos = to2d(mvpPosition) * view_size;\nvec2 _prev = to2d(projectionMatrix * vec4(mvPosition.xyz + vectorMatrix * (prev * 0.01), 1.0)) * view_size;\nvec2 _next = to2d(projectionMatrix * vec4(mvPosition.xyz - vectorMatrix * (next * 0.01), 1.0)) * view_size;\nvec2 dir1 = _pos - _next;\nvec2 dir2 = _prev - _pos;\ndir2 = (length(dir2) > 0.0000001) ? normalize(dir2) : vec2(0.0, 0.0);\ndir1 = (length(dir1) > 0.0000001) ? normalize(dir1) : dir2;\nvec2 dir_sharp = normalize(dir1 + dir2);\nvec2 dir = normalize(dir1 + dir_sharp);\nvec2 offset = vec2(-dir.y, dir.x);\nfloat len = 1.0 / cross(vec3(offset, 0), vec3(dir1, 0)).z;\noffset *= len;\noffset /= view_size;\noffset *= side;\noffset *= mvpPosition.w;\nmvpPosition.xy += offset;\ngl_Position = mvpPosition;\n#endif\n"},three:
/*!************************!*\
  !*** external "THREE" ***!
  \************************/
/*! no static exports found */function(e,n){e.exports=THREE}});